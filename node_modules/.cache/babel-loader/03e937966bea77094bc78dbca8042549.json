{"ast":null,"code":"import React from 'react';\nimport '../App.css';\nimport NavBar from './NavBar';\nimport { Route, Switch } from 'react-router-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport Dashboard from './Dashboard';\nimport Loading from \"./loading.js\";\nimport cities from './cities.json';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      scores: [],\n      coordsAndScores: [],\n      cities: []\n    };\n\n    this.test = () => {\n      this.state.cities.map(city => {\n        console.log(city);\n        this.setState({\n          coordsAndScores: [...this.state.coordsAndScores, city.fields.coordinates]\n        });\n      });\n    };\n\n    this.getClimateScores = () => {\n      fetch(\"https://climate-score.p.rapidapi.com/40.6499541/-73.8512693\", {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      }).then(resp => resp.json()).then(data => {\n        console.log(data);\n        this.setState({\n          scores: [...this.state.scores, data]\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state').then(resp => resp.json()).then(cities => {\n      console.log(cities.records);\n      this.setState({\n        cities: cities.records\n      });\n    });\n    this.test();\n    this.getClimateScores();\n    this.timerId = setInterval(() => this.getClimateScores(), 10000);\n    console.log(this.state.scores);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    console.log(this.state.cities);\n    console.log(this.state.scores);\n    console.log(this.state.coordsAndScores);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \"Hello\");\n  }\n\n}\n\nexport default App; // function App() {\n//   return (\n//     <BrowserRouter>\n//     <div className=\"App\">\n//     <NavBar icon=\"logo\" title=\"ClyMate\" description=\"climate app\" />\n//     <Loading />\n//       <Switch>\n//         <Route show={false} path='/home' component={Dashboard} />\n//       </Switch>\n//     </div>\n//     </BrowserRouter>\n//   );\n// }\n// export default App;","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/App.js"],"names":["React","NavBar","Route","Switch","BrowserRouter","Dashboard","Loading","cities","App","Component","state","scores","coordsAndScores","test","map","city","console","log","setState","fields","coordinates","getClimateScores","fetch","then","resp","json","data","componentDidMount","records","timerId","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,MAAMC,GAAN,SAAkBR,KAAK,CAACS,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,eAAe,EAAE,EAFX;AAGNL,MAAAA,MAAM,EAAE;AAHF,KAFwB;;AAAA,SAuBhCM,IAvBgC,GAuBzB,MAAM;AACX,WAAKH,KAAL,CAAWH,MAAX,CAAkBO,GAAlB,CAAuBC,IAAD,IAAQ;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aAAKG,QAAL,CAAc;AACZN,UAAAA,eAAe,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,eAAf,EACCG,IAAI,CAACI,MAAL,CAAYC,WADb;AADL,SAAd;AAID,OAND;AAOD,KA/B+B;;AAAA,SAqChCC,gBArCgC,GAqCb,MAAM;AAEvBC,MAAAA,KAAK,CAAC,6DAAD,EAAgE;AACtE,kBAAU,KAD4D;AAEtE,mBAAW;AACZ,6BAAmB,8BADP;AAEZ,4BAAkB;AAFN;AAF2D,OAAhE,CAAL,CAOCC,IAPD,CAOMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAPd,EAQCF,IARD,CAQMG,IAAI,IAAI;AACZV,QAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACD,aAAKR,QAAL,CAAc;AACXP,UAAAA,MAAM,EAAE,CACN,GAAG,KAAKD,KAAL,CAAWC,MADR,EACgBe,IADhB;AADG,SAAd;AAKA,OAfD;AAiBD,KAxD+B;AAAA;;AAQhCC,EAAAA,iBAAiB,GAAG;AAClBL,IAAAA,KAAK,CAAC,iLAAD,CAAL,CACGC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQhB,MAAM,IAAI;AACdS,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACqB,OAAnB;AACA,WAAKV,QAAL,CAAc;AACZX,QAAAA,MAAM,EAAEA,MAAM,CAACqB;AADH,OAAd;AAGH,KAPD;AAQA,SAAKf,IAAL;AACA,SAAKQ,gBAAL;AACA,SAAKQ,OAAL,GAAeC,WAAW,CAAC,MAAM,KAAKT,gBAAL,EAAP,EAAgC,KAAhC,CAA1B;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWC,MAAvB;AACD;;AAYDoB,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKH,OAAN,CAAb;AACD;;AAuBDI,EAAAA,MAAM,GAAG;AACPjB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWH,MAAvB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWC,MAAvB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWE,eAAvB;AACA,wBACE,kDADF;AAKD;;AAnE+B;;AAsElC,eAAeJ,GAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport NavBar from './NavBar';\nimport { Route, Switch } from 'react-router-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport Dashboard from './Dashboard';\nimport Loading from \"./loading.js\"\nimport cities from './cities.json'\n\nclass App extends React.Component {\n\n  state = {\n    scores: [],\n    coordsAndScores: [],\n    cities: []\n  }\n\n  componentDidMount() {\n    fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state')\n      .then(resp => resp.json())\n      .then(cities => {\n        console.log(cities.records)\n        this.setState({\n          cities: cities.records\n        })\n    })\n    this.test()\n    this.getClimateScores()\n    this.timerId = setInterval(() => this.getClimateScores(), 10000)\n    console.log(this.state.scores)\n  }\n\n  test = () => {\n    this.state.cities.map((city)=>{\n      console.log(city)\n      this.setState({\n        coordsAndScores: [...this.state.coordsAndScores,\n                          city.fields.coordinates]\n      })\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId)\n  }\n\n  getClimateScores = () => {\n\n    fetch(\"https://climate-score.p.rapidapi.com/40.6499541/-73.8512693\", {\n\t  \"method\": \"GET\",\n\t  \"headers\": {\n\t\t\"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n\t\t\"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n  \t}\n    })\n    .then(resp => resp.json())\n    .then(data => {\n      console.log(data)\n\t    this.setState({ \n        scores: [\n          ...this.state.scores, data\n        ]\n      })\n    })\n\n  }\n\n  render() {\n    console.log(this.state.cities)\n    console.log(this.state.scores)\n    console.log(this.state.coordsAndScores)\n    return (\n      <>\n       Hello\n      </>\n    )\n  }\n}\n\nexport default App\n\n// function App() {\n//   return (\n    \n//     <BrowserRouter>\n//     <div className=\"App\">\n//     <NavBar icon=\"logo\" title=\"ClyMate\" description=\"climate app\" />\n//     <Loading />\n//       <Switch>\n//         <Route show={false} path='/home' component={Dashboard} />\n//       </Switch>\n//     </div>\n//     </BrowserRouter>\n//   );\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}