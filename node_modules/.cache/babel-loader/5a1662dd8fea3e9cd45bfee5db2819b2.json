{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, MarkerWithLabel, GoogleApiWrapper } from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore';\nimport { Dropdown } from 'semantic-ui-react';\nexport class ClimateMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      showClimateScore: false,\n      coords: {\n        lat: '-23.304354',\n        lng: '151.916417'\n      },\n      address: 'Wilson Island, Australia',\n      allScores: false\n    };\n\n    this.mapCLicked = (mapProps, map, event) => {\n      console.log('I was clicked!');\n      console.log(mapProps);\n      console.log(map);\n      console.log(event);\n    };\n\n    this.onMarkerDragEnd = (coord, map) => {\n      console.log(map);\n      console.log(coord);\n      console.log(coord.latLng);\n      const {\n        position\n      } = coord;\n      const newLat = position.lat;\n      const newLon = position.lng;\n      map.center = {\n        lat: newLat,\n        lng: newLon\n      }; // fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n      // \t\"method\": \"GET\",\n      // \t\"headers\": {\n      // \t\"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n      // \t\"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n      //   }\n      // })\n      // .then(resp => resp.json())\n      // .then(data => {\n      //   console.log(data)\n      //   this.setState({\n      //     allScores: {\n      //       ClimateScore: data.ClimateScore,\n      //       DroughtScore: data.DroughtScore,\n      //       FireScore: data.FireScore,\n      //       SeaLevelScore: data.SeaLevelScore,\n      //       StormScore: data.StormScore,\n      //       TempScore: data.TempScore,\n      //     },\n      //   })\n      // })\n      // .catch(err => {\n      //   this.setState({\n      //     allScores: false,\n      //   })\n      //   console.log(err)})\n      // this.setState({\n      //   coords: {\n      //     lat: newLat,\n      //     lng: newLon\n      //   }\n      // })\n      // Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n      // Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(\n      //   response => {\n      //     const newAddress = response.results[0].formatted_address;\n      //     this.setState({\n      //       address: newAddress\n      //     });\n      //   },\n      //   error => {\n      //     console.error(error);\n      //   }\n      // );\n\n      fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`).then(resp => resp.json()).then(data => console.log(data.data));\n    };\n\n    this.handleSubmit = value => {\n      const x = document.getElementById('lol');\n      console.log(x);\n      Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n      Geocode.fromAddress(`${value.description}`).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        console.log(lat, lng);\n        fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n          \"method\": \"GET\",\n          \"headers\": {\n            \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n          }\n        }).then(resp => resp.json()).then(data => {\n          console.log(data);\n          this.setState({\n            allScores: {\n              ClimateScore: data.ClimateScore,\n              DroughtScore: data.DroughtScore,\n              FireScore: data.FireScore,\n              SeaLevelScore: data.SeaLevelScore,\n              StormScore: data.StormScore,\n              TempScore: data.TempScore\n            }\n          });\n        }).catch(err => {\n          this.setState({\n            allScores: false\n          });\n          console.log(err);\n        });\n        Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n        Geocode.fromLatLng(lat, lng).then(response => {\n          const newAddress = response.results[0].formatted_address;\n          this.setState({\n            address: newAddress\n          });\n        }, error => {\n          console.error(error);\n        });\n        this.setState({\n          coords: {\n            lat: lat,\n            lng: lng\n          }\n        });\n        fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`).then(resp => resp.json()).then(data => console.log(data.data));\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.renderMarkers = () => {\n      return this.props.stations.map(statObj => {\n        const google = this.props.google;\n        let iw = 83,\n            ih = 107;\n\n        if (statObj.aqi != '-') {\n          return /*#__PURE__*/React.createElement(Marker, Object.assign({}, statObj, {\n            position: {\n              lat: statObj.lat,\n              lng: statObj.lon\n            },\n            icon: {\n              url: `https://waqi.info/mapicon/${statObj.aqi}.30.png`,\n              anchor: new google.maps.Point(iw / 4, ih / 2 - 5),\n              size: new google.maps.Size(iw / 2, ih / 2),\n              scaledSize: new google.maps.Size(30, 40)\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 14\n            }\n          }));\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lng = position.coords.longitude;\n      let currentLocation = {\n        lat: lat,\n        lng: lng\n      };\n      this.setState({\n        coords: currentLocation\n      });\n    });\n    fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`).then(resp => resp.json()).then(data => console.log(data.data));\n  }\n\n  render() {\n    const mapOptions = [{\n      key: 'Climate Score',\n      text: 'Climate Scoreâ„¢',\n      value: 'Climate Score'\n    }, {\n      key: 'Air Quality Index',\n      text: 'Air Quality Index',\n      value: 'Air Quality Index'\n    }];\n    const style = {\n      width: '90%',\n      height: '90%'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }\n    }, \"Filter Map by\", ' ', /*#__PURE__*/React.createElement(Dropdown, {\n      inline: true,\n      options: mapOptions,\n      onLabelClick: () => this.labelClicked(),\n      defaultValue: mapOptions[1].value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 5\n      }\n    })), /*#__PURE__*/React.createElement(ClimateScore, {\n      coords: this.state.coords,\n      scores: this.state.allScores,\n      address: this.state.address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(GooglePlacesAutocomplete, {\n      onSelect: ({\n        value\n      }) => {\n        this.setState({\n          searchText: value\n        });\n      },\n      onSelect: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      style: style,\n      initialCenter: this.state.coords,\n      center: this.state.coords,\n      onClick: this.mapCLicked,\n      zoom: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, this.renderMarkers(), /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: 56.999,\n        lng: 55.888\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Current location',\n      draggable: true,\n      initialCenter: this.state.coords,\n      position: this.state.coords,\n      onDragend: (coord, map) => this.onMarkerDragEnd(coord, map),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8'\n})(ClimateMap);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js"],"names":["React","Component","Map","InfoWindow","Marker","MarkerWithLabel","GoogleApiWrapper","GooglePlacesAutocomplete","Geocode","ClimateScore","Dropdown","ClimateMap","state","searchText","showClimateScore","coords","lat","lng","address","allScores","mapCLicked","mapProps","map","event","console","log","onMarkerDragEnd","coord","latLng","position","newLat","newLon","center","fetch","then","resp","json","data","handleSubmit","value","x","document","getElementById","setApiKey","fromAddress","description","response","results","geometry","location","setState","DroughtScore","FireScore","SeaLevelScore","StormScore","TempScore","catch","err","fromLatLng","newAddress","formatted_address","error","renderMarkers","props","stations","statObj","google","iw","ih","aqi","lon","url","anchor","maps","Point","size","Size","scaledSize","componentDidMount","navigator","geolocation","getCurrentPosition","latitude","longitude","currentLocation","render","mapOptions","key","text","style","width","height","labelClicked","onMarkerClick","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Map, InfoWindow, Marker, MarkerWithLabel, GoogleApiWrapper} from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore'\nimport { Dropdown } from 'semantic-ui-react'\n\n\nexport class ClimateMap extends Component {\n\n  state = {\n    searchText: '',\n    showClimateScore: false,\n    coords: {\n      lat: '-23.304354',\n      lng: '151.916417'\n    },\n    address: 'Wilson Island, Australia',\n    allScores: false,\n  }\n\n  componentDidMount(){\n    navigator.geolocation.getCurrentPosition((position) => {\n      let lat = position.coords.latitude\n      let lng = position.coords.longitude\n      let currentLocation = {lat: lat,lng: lng}\n      this.setState({\n        coords: currentLocation\n      })\n    })\n    fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n    .then(resp => resp.json())\n    .then(data => console.log(data.data))\n  }\n\n  mapCLicked = (mapProps, map, event) => {\n    console.log('I was clicked!')\n    console.log(mapProps)\n    console.log(map)\n    console.log(event)\n  }\n\n\n  onMarkerDragEnd = (coord, map) => {\n    console.log(map)\n    console.log(coord)\n    console.log(coord.latLng)\n    const { position } = coord;\n    const newLat = position.lat;\n    const newLon = position.lng;\n    map.center={lat: newLat, lng: newLon}\n    // fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n    // \t\"method\": \"GET\",\n    // \t\"headers\": {\n\t  // \t\"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n\t  // \t\"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n    //   }\n    // })\n    // .then(resp => resp.json())\n    // .then(data => {\n    //   console.log(data)\n    //   this.setState({\n    //     allScores: {\n    //       ClimateScore: data.ClimateScore,\n    //       DroughtScore: data.DroughtScore,\n    //       FireScore: data.FireScore,\n    //       SeaLevelScore: data.SeaLevelScore,\n    //       StormScore: data.StormScore,\n    //       TempScore: data.TempScore,\n    //     },\n    //   })\n    // })\n    // .catch(err => {\n    //   this.setState({\n    //     allScores: false,\n    //   })\n    //   console.log(err)})\n    // this.setState({\n    //   coords: {\n    //     lat: newLat,\n    //     lng: newLon\n    //   }\n    // })\n    // Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    // Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(\n    //   response => {\n    //     const newAddress = response.results[0].formatted_address;\n    //     this.setState({\n    //       address: newAddress\n    //     });\n    //   },\n    //   error => {\n    //     console.error(error);\n    //   }\n    // );\n    fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n    .then(resp => resp.json())\n    .then(data => console.log(data.data))  \n  };\n\n  handleSubmit = (value) => {\n    const x = document.getElementById('lol')\n    console.log(x)\n    Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    Geocode.fromAddress(`${value.description}`).then(\n      response => {\n      const { lat, lng } = response.results[0].geometry.location;\n      console.log(lat, lng);\n      fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n        \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data)\n        this.setState({\n          allScores: {\n            ClimateScore: data.ClimateScore,\n            DroughtScore: data.DroughtScore,\n            FireScore: data.FireScore,\n            SeaLevelScore: data.SeaLevelScore,\n            StormScore: data.StormScore,\n            TempScore: data.TempScore,\n          },\n        })\n      })\n      .catch(err => {\n        this.setState({\n          allScores: false,\n        })\n        console.log(err)})\n      Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n      Geocode.fromLatLng(lat, lng).then(\n      response => {\n        const newAddress = response.results[0].formatted_address;\n        this.setState({\n          address: newAddress\n        });\n      },\n      error => {\n        console.error(error);\n      });\n      this.setState({\n        coords: {\n          lat: lat,\n          lng: lng\n        }\n      })\n      fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n      .then(resp => resp.json())\n      .then(data => console.log(data.data))  \n      },\n      error => {\n      console.error(error);\n    })\n  }\n\n  renderMarkers = () => {\n    return this.props.stations.map((statObj)=>{\n      const google = this.props.google\n      let iw = 83,\n          ih = 107;\n      if (statObj.aqi != '-'){\n      return <Marker  {...statObj}\n                      position={{lat: statObj.lat, lng: statObj.lon}}\n                      icon={{\n                        url: `https://waqi.info/mapicon/${statObj.aqi}.30.png`,\n                        anchor: new google.maps.Point(iw / 4, ih / 2 - 5),\n                        size: new google.maps.Size(iw / 2, ih / 2),\n                        scaledSize: new google.maps.Size(30, 40)\n                      }}\n        \n      \n      />\n      }  \n    })\n  }\n\n  render() {\n    const mapOptions = [\n      {\n        key: 'Climate Score',\n        text: 'Climate Scoreâ„¢',\n        value: 'Climate Score',\n      },\n      {\n        key: 'Air Quality Index',\n        text: 'Air Quality Index',\n        value: 'Air Quality Index',\n      }]\n    const style = {\n      width: '90%',\n      height: '90%'\n    }\n    return (\n\n      <div>\n      <span>\n    Filter Map by{' '}\n    <Dropdown\n      inline\n      options={mapOptions}\n      onLabelClick={()=>this.labelClicked()}\n      defaultValue={mapOptions[1].value}\n    />\n  </span>\n      <ClimateScore coords={this.state.coords} scores={this.state.allScores} address={this.state.address} />\n        <GooglePlacesAutocomplete onSelect={({ value }) => {(this.setState({ searchText: value }))}}\n                                  onSelect={this.handleSubmit}\n        />\n        \n      <Map  google={this.props.google}\n            style={style} \n            initialCenter={this.state.coords}\n            center={this.state.coords}\n            onClick={this.mapCLicked} \n            zoom={14}\n            >\n        {this.renderMarkers()}\n        <Marker \n          position={{lat: 56.999, lng: 55.888}}\n          />\n        <Marker onClick={this.onMarkerClick}\n                name={'Current location'} \n                draggable={true}\n                initialCenter={this.state.coords}\n                position={this.state.coords}\n                onDragend={(coord, map) => this.onMarkerDragEnd(coord, map)}/>\n \n        {/* <InfoWindow onClose={this.onInfoWindowClose}>\n        </InfoWindow> */}\n      </Map>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8')\n})(ClimateMap)"]},"metadata":{},"sourceType":"module"}