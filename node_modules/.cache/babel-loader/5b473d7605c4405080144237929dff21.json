{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUsersSuccess } from '../actions/user';\nimport { fetchStatSuccess } from '../actions/stat';\nimport { fetchCitiesSuccess } from '../actions/city';\nimport ClimateMap from './ClimateMap';\nimport cities from './cities.json';\nimport climScores from './climScores.json';\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      climateScores: climScores\n    };\n\n    this.testing = () => {\n      (function (w, d, t, f) {\n        w[f] = w[f] || function (c, k, n) {\n          s = w[f], k = s['k'] = s['k'] || (k ? '&k=' + k : '');\n          s['c'] = c = c instanceof Array ? c : [c];\n          s['n'] = n = n || 0;\n          L = d.createElement(t), e = d.getElementsByTagName(t)[0];\n          L.async = 1;\n          L.src = '//feed.aqicn.org/feed/' + c[n].city + '/' + (c[n].lang || '') + '/feed.v1.js?n=' + n + k;\n          e.parentNode.insertBefore(L, e);\n        };\n      })(window, document, 'script', '_aqiFeed');\n\n      _aqiFeed({\n        container: \"city-aqi-container\",\n        city: \"beijing\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3001/users').then(resp => resp.json()).then(data => {\n      this.props.fetchUsersSuccess(data);\n    });\n    fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c').then(resp => resp.json()).then(stations => {\n      this.props.fetchStatSuccess(stations.data);\n    });\n    fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state').then(resp => resp.json()).then(cities => {\n      console.log(cities.records);\n      this.props.fetchCitiesSuccess(cities.records);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, this.testing(), /*#__PURE__*/React.createElement(ClimateMap, {\n      stations: this.props.stats,\n      cities: this.props.cities,\n      climateScores: this.state.climateScores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    stats: state.stats,\n    cities: state.cities\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchUsersSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js"],"names":["React","connect","fetchUsersSuccess","fetchStatSuccess","fetchCitiesSuccess","ClimateMap","cities","climScores","Dashboard","Component","state","climateScores","testing","w","d","t","f","c","k","n","s","Array","L","createElement","e","getElementsByTagName","async","src","city","lang","parentNode","insertBefore","window","document","_aqiFeed","container","componentDidMount","fetch","then","resp","json","data","props","stations","console","log","records","render","stats","mapStateToProps","users","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { fetchUsersSuccess } from '../actions/user'\nimport { fetchStatSuccess } from '../actions/stat'\nimport { fetchCitiesSuccess } from '../actions/city'\nimport ClimateMap from './ClimateMap'\nimport cities from './cities.json'\nimport climScores from './climScores.json'\n\nclass Dashboard extends React.Component {\n\n  state = {\n    climateScores: climScores,\n  }\n  \n  componentDidMount(){\n    fetch('http://localhost:3001/users')\n    .then(resp => resp.json())\n    .then(data => {\n      this.props.fetchUsersSuccess(data)\n    })\n    fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n    .then(resp => resp.json())\n    .then(stations => {\n      this.props.fetchStatSuccess(stations.data)\n    })\n    fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state')\n    .then(resp => resp.json())\n    .then(cities => {\n      console.log(cities.records)\n      this.props.fetchCitiesSuccess(cities.records)\n    })\n  }\n\n  testing = () => {\n    (function(w,d,t,f){  w[f]=w[f]||function(c,k,n){s=w[f],k=s['k']=(s['k']||(k?('&k='+k):''));s['c']=  \n      c=(c  instanceof  Array)?c:[c];s['n']=n=n||0;L=d.createElement(t),e=d.getElementsByTagName(t)[0];  \n      L.async=1;L.src='//feed.aqicn.org/feed/'+(c[n].city)+'/'+(c[n].lang||'')+'/feed.v1.js?n='+n+k;  \n      e.parentNode.insertBefore(L,e);  };  })(  window,document,'script','_aqiFeed'  )\n      _aqiFeed({  container:\"city-aqi-container\",  city:\"beijing\"  })\n  }\n\n  render(){ \n    return (\n      <div>\n       {this.testing()}\n        <ClimateMap stations={this.props.stats} cities={this.props.cities} climateScores={this.state.climateScores}/>\n      </div>)\n  };\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.users,\n    stats: state.stats,\n    cities: state.cities,\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchUsersSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\n\n"]},"metadata":{},"sourceType":"module"}