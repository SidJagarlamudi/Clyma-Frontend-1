{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, MarkerWithLabel, GoogleApiWrapper } from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore';\nimport { Dropdown, Checkbox } from 'semantic-ui-react';\nimport mapStyles from './mapStyles';\nimport MoreDetails from './MoreDetails';\nimport useMouse from '@react-hook/mouse-position';\nimport InfoWindowTest from './InfoWindowTest';\n\nclass MarkersList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.markersRendered = false;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (JSON.stringify(this.props.places) === JSON.stringify(nextProps.places) && this.markersRendered) {\n      return false;\n    }\n\n    this.markersRendered = true;\n    return true;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, this.props.places.map((place, i) => {\n      return /*#__PURE__*/React.createElement(Marker, Object.assign({}, this.props, {\n        key: i,\n        data: place,\n        position: {\n          lat: place.lat,\n          lng: place.lng\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }\n      }));\n    }));\n  }\n\n}\n\nclass ClimateMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMarkerClick = (markerProps, marker, e) => {\n      this.setState({\n        selectedPlace: markerProps.data,\n        activeMarker: marker,\n        showInfoWindow: true\n      });\n    };\n\n    this.state = {\n      showInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {}\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      className: \"map\",\n      zoom: 4,\n      initialCenter: this.props.center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MarkersList, {\n      google: this.props.google,\n      places: this.props.places,\n      onClick: this.handleMarkerClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      ref: this.infoWindowRef,\n      marker: this.state.activeMarker,\n      visible: this.state.showInfoWindow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, this.state.selectedPlace.name))));\n  }\n\n} // state = {\n//   searchText: '',\n//   showClimateScore: false,\n//   coords: {\n//     lat: -23.304354,\n//     lng: 151.916417\n//   },\n//   address: 'Wilson Island, Australia',\n//   allScores: false,\n//   showAQI: true,\n//   hoveredPinStat: {},\n//   hoveredCoords: {\n//     lat: '',\n//     lng: ''\n//   },\n//   showInfo: false,\n//   activeMarker: {},\n//   selectedPlace: {},\n//   data: {},\n//   stations: {}\n// }\n// shouldComponentUpdate( nextProps, nextState ){\n//   if (this.state.coords == nextState.coords){\n//     return false\n//   } else {\n//     return true\n//   }\n// }\n// componentDidMount(){\n//   fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n//   .then(resp => resp.json())\n//   .then(stations => {\n//     this.setState({stations:stations.data.slice(0,1000)})\n//   })\n//   navigator.geolocation.getCurrentPosition((position) => {\n//     let lat = position.coords.latitude\n//     let lng = position.coords.longitude\n//     let currentLocation = {lat: lat,lng: lng}\n//     this.setState({\n//       coords: currentLocation\n//     })\n//   })\n//   fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n//   .then(resp => resp.json())\n//   .then(data => console.log(data.data))\n// }\n// mapCLicked = (mapProps, map, event) => {\n//   console.log(event)\n// }\n// onMarkerDragEnd = (coord) => {\n//   const { latLng } = coord;\n//   const newLat = latLng.lat();\n//   const newLon = latLng.lng();\n// this.setState({\n//   coords: {\n//     lat: newLat,\n//     lng: newLon\n//   }\n// })\n// console.log(this.state.coords)\n// this._score.state.coords.lat = newLat\n// this._score.state.coords.lng = newLon\n// this._map.map.setCenter({lat: newLat, lng: newLon})    \n// fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n// \t\"method\": \"GET\",\n// \t\"headers\": {\n// \t\"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n// \t\"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n//   }\n// })\n// .then(resp => resp.json())\n// .then(data => {\n//   console.log(data)\n//   this.setState({\n//     allScores: {\n//       ClimateScore: data.ClimateScore,\n//       DroughtScore: data.DroughtScore,\n//       FireScore: data.FireScore,\n//       SeaLevelScore: data.SeaLevelScore,\n//       StormScore: data.StormScore,\n//       TempScore: data.TempScore,\n//     },\n//   })\n// })\n// .catch(err => {\n//   this.setState({\n//     allScores: false,\n//   })\n//   console.log(err)})\n// Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n// Geocode.fromLatLng(newLat, newLon).then(\n//   response => {\n//     const newAddress = response.results[0].formatted_address;\n//     this._score.state.address = newAddress\n//   },\n//   error => {\n//     console.error(error);\n//   }\n// );\n// fetch(`https://api.waqi.info/feed/geo:${newLat};${newLon}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n// .then(resp => resp.json())\n// .then(data => {\n//   console.log(data)\n//   this._score.state.aqi = data.data.aqi})  \n// };\n// handleSubmit = (value) => {\n//   Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n//   Geocode.fromAddress(`${value.description}`).then(\n//     response => {\n//     const { lat, lng } = response.results[0].geometry.location;\n//     this._score.state.lat = lat\n//     this._score.state.lng = lng\n//     this._map.map.setCenter({lat: lat, lng: lng})  \n//     console.log(this._marker.marker.position.lat())\n//     this._marker.marker.setPosition({lat: lat, lng: lng})  \n// fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n//   \"method\": \"GET\",\n//   \"headers\": {\n//   \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n//   \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n//   }\n// })\n// .then(resp => resp.json())\n// .then(data => {\n//   console.log(data)\n//   this.setState({\n//     allScores: {\n//       ClimateScore: data.ClimateScore,\n//       DroughtScore: data.DroughtScore,\n//       FireScore: data.FireScore,\n//       SeaLevelScore: data.SeaLevelScore,\n//       StormScore: data.StormScore,\n//       TempScore: data.TempScore,\n//     },\n//   })\n// })\n// .catch(err => {\n// this.setState({\n//   allScores: false,\n// })\n// console.log(err)})\n//     Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n//     Geocode.fromLatLng(lat, lng).then(\n//     response => {\n//       const newAddress = response.results[0].formatted_address;\n//       this._score.state.address = newAddress\n//     },\n//     error => {\n//       console.error(error);\n//     });\n//     fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n//     .then(resp => resp.json())\n//     .then(data => console.log(data.data))  \n//     },\n//     error => {\n//     console.error(error);\n//   })\n// }\n// renderMarkers = () => {\n//   if (this.state.showAQI){\n//     console.log('testing')\n//     return <MarkersList stations={this.state.stations}\n//     onMarkerClick={this.onMarkerClick}/>\n//     } else {\n//       return this.props.climateScores.map((score)=>{\n//         const numberString = score.ClimateScore.toString()\n//         const google = this.props.google\n//         let iw = 83,\n//         ih = 107\n//         return <Marker position={{lat: score.lat, lng: score.lng}}\n//         icon={{\n//           url: `https://waqi.info/mapicon/${numberString}.50.png`,\n//           anchor: new google.maps.Point(iw / 4, ih / 2 - 5),\n//           size: new google.maps.Size(iw / 2, ih / 2),\n//           scaledSize: new google.maps.Size(30, 40)\n//         }}\n//         />})\n//       }  \n//     }\n//     labelClicked = (e) => {\n//       console.log('working')\n//   console.log(e.nativeEvent.target.innerHTML)\n//   if (e.nativeEvent.target.innerHTML === 'Climate Scoreâ„¢'){\n//     this.setState({\n//       showAQI: false\n//     })\n//   }\n// }\n// markerHover = () => {\n//   const google = this.props.google\n//   if (this._marker.marker.getAnimation() !== null) {\n//     this._marker.marker.setAnimation(null);\n//   } else {\n//     this._marker.marker.setAnimation(google.maps.Animation.BOUNCE);\n//   }\n// }\n// mouseOut = e => {\n//   this._more.state.display = 'none'\n//   this.setState({\n//     showInfo: 'false'\n//   })\n// }\n// onMarkerClick = (props, marker, e) => {\n//   fetch(`https://api.waqi.info/feed/geo:${marker.info.lat};${marker.info.lon}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n//     .then(resp => resp.json())\n//     .then(data => {\n//       this.setState({\n//         data: data.data,\n//         selectedPlace: props,\n//         activeMarker: marker,\n//         showInfo: true\n//       })\n//       console.log(data)\n//     })\n// }\n// mouseMove = (e) => {\n//   this._more.state.clientX = e.pageX\n//   this._more.state.clientY = e.pageY\n// }\n//   render() {\n//     console.log(this.props)\n//     console.log(this.state)\n//     const mapOptions = [\n//       {\n//         key: 'Climate Score',\n//         text: 'Climate Scoreâ„¢',\n//         value: 'Climate Score',\n//       },\n//       {\n//         key: 'Air Quality Index',\n//         text: 'Air Quality Index',\n//         value: 'Air Quality Index',\n//       }\n//     ] \n//     return(\n//       <div \n//       // onMouseMove={(e)=>this.mouseMove(e)}\n//       >\n//         <MoreDetails ref={(more)=>this._more = more}\n//         coords={this.state.coords}\n//         pinHover={this.pinHover}\n//                       />\n//       <h2>{this.state.coords.lat}</h2>\n//       <GooglePlacesAutocomplete onSelect={({ value }) => {(this.setState({ searchText: value }))}}\n//                                     onSelect={this.handleSubmit}\n//           />  \n//       <ClimateScore ref={(score)=>this._score = score} map={this._map} onMarkerDragEnd={this.onMarkerDragEnd}\n//               coords={this.state.coords} scores={this.state.allScores} address={this.state.address} />\n//       <Map  ref={(map) => this._map = map}\n//             google={this.props.google}\n//             styles={mapStyles}\n//             style={{width: '90%',height: '90%'}}\n//             // mapTypeControlOptions={{\n//               //   style: this.props.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n//             //   mapTypeIds: [\n//               //     this.props.google.maps.MapTypeId.ROADMAP,\n//             //     this.props.google.maps.MapTypeId.SATELLITE,\n//             //     this.props.google.maps.MapTypeId.HYBRID\n//             //   ]\n//             // }}\n//             onCenterChanged={()=>{\n//             }}\n//             initialCenter={this.state.coords}\n//             center={this.state.coords}\n//             onClick={this.mapCLicked} \n//             zoom={14}\n//             >\n//         <Dropdown\n//           closeOnChange\n//           inline\n//           options={mapOptions}\n//           onChange={this.labelClicked}\n//           defaultValue={mapOptions[1].value}\n//           />\n//         {/* {this.renderMarkers()} */}\n//         <MarkersList stations={this.state.stations}\n//       onMarkerClick={this.onMarkerClick}/>\n//         <Marker ref={(marker)=>this._marker = marker}\n//                 onClick={this.onMarkerClick}\n//                 name={'Current location'} \n//                 draggable={true}\n//                 onMouseover={()=>this.markerHover()}\n//                 initialCenter={this.state.coords}\n//                 position={this.state.coords}\n//                 onDragend={(t, map, coord) => this.onMarkerDragEnd(coord)}/>\n//         <InfoWindow\n//           marker={this.state.activeMarker}\n//           visible={this.state.showInfo}>\n//             <div>\n//               <h1>{this.state.showInfo? this.state.data.city.name : null}</h1>\n//             </div>\n//         </InfoWindow>\n//       </Map>\n//       </div>)\n//   }\n// }\n\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8'\n})(ClimateMap);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js"],"names":["React","Component","Map","InfoWindow","Marker","MarkerWithLabel","GoogleApiWrapper","GooglePlacesAutocomplete","Geocode","ClimateScore","Dropdown","Checkbox","mapStyles","MoreDetails","useMouse","InfoWindowTest","MarkersList","constructor","props","markersRendered","shouldComponentUpdate","nextProps","nextState","JSON","stringify","places","render","map","place","i","lat","lng","ClimateMap","handleMarkerClick","markerProps","marker","e","setState","selectedPlace","data","activeMarker","showInfoWindow","state","google","center","infoWindowRef","name","apiKey"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA,eAAexC,gBAAgB,CAAC;AAC9ByC,EAAAA,MAAM,EAAG;AADqB,CAAD,CAAhB,CAEZf,UAFY,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {Map, InfoWindow, Marker, MarkerWithLabel, GoogleApiWrapper, } from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore'\nimport { Dropdown, Checkbox } from 'semantic-ui-react'\nimport mapStyles from './mapStyles'\nimport MoreDetails from './MoreDetails'\nimport useMouse from '@react-hook/mouse-position'\nimport InfoWindowTest from './InfoWindowTest'\n\n\n\nclass MarkersList extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.markersRendered = false;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (JSON.stringify(this.props.places) === JSON.stringify(nextProps.places) && this.markersRendered) {\n      return false;\n    }\n    this.markersRendered = true;\n    return true;\n  }\n\n  render() {\n    return (\n      <span>\n        {this.props.places.map((place, i) => {\n          return (\n            <Marker\n              {...this.props}\n              key={i}\n              data={place}\n              position={{ lat: place.lat, lng: place.lng }}\n            />\n          );\n        })}\n      </span>\n    )\n  }\n\n}\n\nclass ClimateMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {}\n    };\n  }\n\n  handleMarkerClick = (markerProps, marker, e) => {\n    this.setState({\n      selectedPlace: markerProps.data,\n      activeMarker: marker,\n      showInfoWindow: true\n    });\n  };\n\n\n  render() {\n    return (\n      <div className=\"map-container\">\n        <Map\n          google={this.props.google}\n          className={\"map\"}\n          zoom={4}\n          initialCenter={this.props.center}\n        >\n          <MarkersList google={this.props.google} places={this.props.places} onClick={this.handleMarkerClick} />\n          <InfoWindow\n            ref={this.infoWindowRef}\n            marker={this.state.activeMarker}\n            visible={this.state.showInfoWindow}\n          >\n            <h3>{this.state.selectedPlace.name}</h3>\n          </InfoWindow>\n        </Map>\n      </div>\n    );\n  }\n}\n  \n\n\n  // state = {\n  //   searchText: '',\n  //   showClimateScore: false,\n  //   coords: {\n  //     lat: -23.304354,\n  //     lng: 151.916417\n  //   },\n  //   address: 'Wilson Island, Australia',\n  //   allScores: false,\n  //   showAQI: true,\n  //   hoveredPinStat: {},\n  //   hoveredCoords: {\n  //     lat: '',\n  //     lng: ''\n  //   },\n  //   showInfo: false,\n  //   activeMarker: {},\n  //   selectedPlace: {},\n  //   data: {},\n  //   stations: {}\n  // }\n\n  // shouldComponentUpdate( nextProps, nextState ){\n  //   if (this.state.coords == nextState.coords){\n  //     return false\n  //   } else {\n  //     return true\n  //   }\n  // }\n\n  // componentDidMount(){\n  //   fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n  //   .then(resp => resp.json())\n  //   .then(stations => {\n  //     this.setState({stations:stations.data.slice(0,1000)})\n  //   })\n  //   navigator.geolocation.getCurrentPosition((position) => {\n  //     let lat = position.coords.latitude\n  //     let lng = position.coords.longitude\n  //     let currentLocation = {lat: lat,lng: lng}\n  //     this.setState({\n  //       coords: currentLocation\n  //     })\n  //   })\n  //   fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n  //   .then(resp => resp.json())\n  //   .then(data => console.log(data.data))\n    \n  // }\n\n  \n  // mapCLicked = (mapProps, map, event) => {\n  //   console.log(event)\n  // }\n\n  // onMarkerDragEnd = (coord) => {\n  //   const { latLng } = coord;\n  //   const newLat = latLng.lat();\n  //   const newLon = latLng.lng();\n    // this.setState({\n    //   coords: {\n    //     lat: newLat,\n    //     lng: newLon\n    //   }\n    // })\n    // console.log(this.state.coords)\n    // this._score.state.coords.lat = newLat\n    // this._score.state.coords.lng = newLon\n    // this._map.map.setCenter({lat: newLat, lng: newLon})    \n    // fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n    // \t\"method\": \"GET\",\n    // \t\"headers\": {\n\t  // \t\"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n\t  // \t\"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n    //   }\n    // })\n    // .then(resp => resp.json())\n    // .then(data => {\n    //   console.log(data)\n    //   this.setState({\n    //     allScores: {\n    //       ClimateScore: data.ClimateScore,\n    //       DroughtScore: data.DroughtScore,\n    //       FireScore: data.FireScore,\n    //       SeaLevelScore: data.SeaLevelScore,\n    //       StormScore: data.StormScore,\n    //       TempScore: data.TempScore,\n    //     },\n    //   })\n    // })\n    // .catch(err => {\n    //   this.setState({\n    //     allScores: false,\n    //   })\n    //   console.log(err)})\n    // Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    // Geocode.fromLatLng(newLat, newLon).then(\n    //   response => {\n    //     const newAddress = response.results[0].formatted_address;\n    //     this._score.state.address = newAddress\n    //   },\n    //   error => {\n    //     console.error(error);\n    //   }\n    // );\n    // fetch(`https://api.waqi.info/feed/geo:${newLat};${newLon}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n    // .then(resp => resp.json())\n    // .then(data => {\n    //   console.log(data)\n    //   this._score.state.aqi = data.data.aqi})  \n  // };\n\n  // handleSubmit = (value) => {\n  //   Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n  //   Geocode.fromAddress(`${value.description}`).then(\n  //     response => {\n  //     const { lat, lng } = response.results[0].geometry.location;\n  //     this._score.state.lat = lat\n  //     this._score.state.lng = lng\n  //     this._map.map.setCenter({lat: lat, lng: lng})  \n  //     console.log(this._marker.marker.position.lat())\n  //     this._marker.marker.setPosition({lat: lat, lng: lng})  \n      // fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n      //   \"method\": \"GET\",\n      //   \"headers\": {\n      //   \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n      //   \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n      //   }\n      // })\n      // .then(resp => resp.json())\n      // .then(data => {\n      //   console.log(data)\n      //   this.setState({\n      //     allScores: {\n      //       ClimateScore: data.ClimateScore,\n      //       DroughtScore: data.DroughtScore,\n      //       FireScore: data.FireScore,\n      //       SeaLevelScore: data.SeaLevelScore,\n      //       StormScore: data.StormScore,\n      //       TempScore: data.TempScore,\n      //     },\n      //   })\n      // })\n      // .catch(err => {\n        // this.setState({\n        //   allScores: false,\n        // })\n        // console.log(err)})\n  //     Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n  //     Geocode.fromLatLng(lat, lng).then(\n  //     response => {\n  //       const newAddress = response.results[0].formatted_address;\n  //       this._score.state.address = newAddress\n  //     },\n  //     error => {\n  //       console.error(error);\n  //     });\n  //     fetch(`https://api.waqi.info/feed/geo:${this.state.coords.lat};${this.state.coords.lng}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n  //     .then(resp => resp.json())\n  //     .then(data => console.log(data.data))  \n  //     },\n  //     error => {\n  //     console.error(error);\n  //   })\n  // }\n\n  \n  // renderMarkers = () => {\n  //   if (this.state.showAQI){\n\n  //     console.log('testing')\n  //     return <MarkersList stations={this.state.stations}\n  //     onMarkerClick={this.onMarkerClick}/>\n  //     } else {\n  //       return this.props.climateScores.map((score)=>{\n  //         const numberString = score.ClimateScore.toString()\n  //         const google = this.props.google\n  //         let iw = 83,\n  //         ih = 107\n  //         return <Marker position={{lat: score.lat, lng: score.lng}}\n          \n  //         icon={{\n  //           url: `https://waqi.info/mapicon/${numberString}.50.png`,\n  //           anchor: new google.maps.Point(iw / 4, ih / 2 - 5),\n  //           size: new google.maps.Size(iw / 2, ih / 2),\n  //           scaledSize: new google.maps.Size(30, 40)\n  //         }}\n          \n          \n  //         />})\n  //       }  \n  //     }\n      \n  //     labelClicked = (e) => {\n  //       console.log('working')\n  //   console.log(e.nativeEvent.target.innerHTML)\n  //   if (e.nativeEvent.target.innerHTML === 'Climate Scoreâ„¢'){\n  //     this.setState({\n  //       showAQI: false\n  //     })\n  //   }\n  // }\n\n  // markerHover = () => {\n  //   const google = this.props.google\n  //   if (this._marker.marker.getAnimation() !== null) {\n  //     this._marker.marker.setAnimation(null);\n  //   } else {\n  //     this._marker.marker.setAnimation(google.maps.Animation.BOUNCE);\n  //   }\n  // }\n  // mouseOut = e => {\n  //   this._more.state.display = 'none'\n  //   this.setState({\n  //     showInfo: 'false'\n  //   })\n  // }\n  \n  // onMarkerClick = (props, marker, e) => {\n  //   fetch(`https://api.waqi.info/feed/geo:${marker.info.lat};${marker.info.lon}/?token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c`)\n  //     .then(resp => resp.json())\n  //     .then(data => {\n  //       this.setState({\n  //         data: data.data,\n  //         selectedPlace: props,\n  //         activeMarker: marker,\n  //         showInfo: true\n  //       })\n  //       console.log(data)\n  //     })\n  // }\n\n  // mouseMove = (e) => {\n  //   this._more.state.clientX = e.pageX\n  //   this._more.state.clientY = e.pageY\n  // }\n\n//   render() {\n//     console.log(this.props)\n//     console.log(this.state)\n//     const mapOptions = [\n//       {\n//         key: 'Climate Score',\n//         text: 'Climate Scoreâ„¢',\n//         value: 'Climate Score',\n//       },\n//       {\n//         key: 'Air Quality Index',\n//         text: 'Air Quality Index',\n//         value: 'Air Quality Index',\n//       }\n//     ] \n//     return(\n//       <div \n//       // onMouseMove={(e)=>this.mouseMove(e)}\n//       >\n//         <MoreDetails ref={(more)=>this._more = more}\n//         coords={this.state.coords}\n//         pinHover={this.pinHover}\n//                       />\n//       <h2>{this.state.coords.lat}</h2>\n//       <GooglePlacesAutocomplete onSelect={({ value }) => {(this.setState({ searchText: value }))}}\n//                                     onSelect={this.handleSubmit}\n//           />  \n//       <ClimateScore ref={(score)=>this._score = score} map={this._map} onMarkerDragEnd={this.onMarkerDragEnd}\n//               coords={this.state.coords} scores={this.state.allScores} address={this.state.address} />\n//       <Map  ref={(map) => this._map = map}\n//             google={this.props.google}\n//             styles={mapStyles}\n//             style={{width: '90%',height: '90%'}}\n//             // mapTypeControlOptions={{\n//               //   style: this.props.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n//             //   mapTypeIds: [\n//               //     this.props.google.maps.MapTypeId.ROADMAP,\n//             //     this.props.google.maps.MapTypeId.SATELLITE,\n//             //     this.props.google.maps.MapTypeId.HYBRID\n//             //   ]\n//             // }}\n//             onCenterChanged={()=>{\n//             }}\n//             initialCenter={this.state.coords}\n//             center={this.state.coords}\n//             onClick={this.mapCLicked} \n//             zoom={14}\n//             >\n\n//         <Dropdown\n//           closeOnChange\n//           inline\n//           options={mapOptions}\n//           onChange={this.labelClicked}\n//           defaultValue={mapOptions[1].value}\n//           />\n        \n//         {/* {this.renderMarkers()} */}\n//         <MarkersList stations={this.state.stations}\n//       onMarkerClick={this.onMarkerClick}/>\n//         <Marker ref={(marker)=>this._marker = marker}\n//                 onClick={this.onMarkerClick}\n//                 name={'Current location'} \n//                 draggable={true}\n//                 onMouseover={()=>this.markerHover()}\n//                 initialCenter={this.state.coords}\n//                 position={this.state.coords}\n//                 onDragend={(t, map, coord) => this.onMarkerDragEnd(coord)}/>\n//         <InfoWindow\n//           marker={this.state.activeMarker}\n//           visible={this.state.showInfo}>\n          \n//             <div>\n//               <h1>{this.state.showInfo? this.state.data.city.name : null}</h1>\n//             </div>\n//         </InfoWindow>\n//       </Map>\n//       </div>)\n\n//   }\n// }\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8')\n})(ClimateMap)"]},"metadata":{},"sourceType":"module"}