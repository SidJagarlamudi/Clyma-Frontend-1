{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchLocationsSuccess } from '../actions/location';\nimport { fetchStatSuccess } from '../actions/stat';\nimport { fetchCitiesSuccess } from '../actions/city';\nimport { currentUser } from '../actions/auth';\nimport ClimateMap from './ClimateMap';\nimport climScores from './climScores.json';\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      climateScores: climScores\n    };\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      this.props.history.push('/login');\n    } else {\n      const reqObj = {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      };\n      fetch('http://localhost:3001/current_user', reqObj).then(resp => resp.json()).then(data => {\n        this.props.currentUser(data);\n      });\n      fetch('http://localhost:3001//locations').then(resp => resp.json()).then(locations => {\n        const usersLocations = locations.filter(loc => loc.user_id === this.props.auth.id);\n        this.props.fetchLocationsSuccess(usersLocations);\n      }); // fetch('http://localhost:3001/users')\n      // .then(resp => resp.json())\n      // .then(data => {\n      //   this.props.fetchUsersSuccess(data)\n      // })\n\n      fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c').then(resp => resp.json()).then(stations => {\n        let x = stations.data.slice(0, 1000);\n        this.props.fetchStatSuccess(stations.data);\n      });\n      fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state').then(resp => resp.json()).then(cities => {\n        this.props.fetchCitiesSuccess(cities.records);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ClimateMap, {\n      stations: this.props.stats,\n      cities: this.props.cities,\n      climateScores: this.state.climateScores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    locations: state.locations,\n    stats: state.stats,\n    cities: state.cities\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchLocationsSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess,\n  currentUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js"],"names":["React","connect","fetchLocationsSuccess","fetchStatSuccess","fetchCitiesSuccess","currentUser","ClimateMap","climScores","Dashboard","Component","state","climateScores","componentDidMount","token","localStorage","getItem","props","history","push","reqObj","method","headers","fetch","then","resp","json","data","locations","usersLocations","filter","loc","user_id","auth","id","stations","x","slice","cities","records","render","stats","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { fetchLocationsSuccess } from '../actions/location'\nimport { fetchStatSuccess } from '../actions/stat'\nimport { fetchCitiesSuccess } from '../actions/city'\nimport { currentUser } from '../actions/auth'\nimport ClimateMap from './ClimateMap'\nimport climScores from './climScores.json'\n\nclass Dashboard extends React.Component {\n\n  state = {\n    climateScores: climScores,\n  }\n  \n  componentDidMount(){\n    const token = localStorage.getItem('token')\n    if (!token) {\n      this.props.history.push('/login')\n    } else {\n      const reqObj = {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n      fetch('http://localhost:3001/current_user', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        this.props.currentUser(data)\n      })\n      fetch('http://localhost:3001//locations')\n      .then(resp => resp.json())\n      .then(locations => {\n        const usersLocations = locations.filter(loc => loc.user_id === this.props.auth.id)\n        this.props.fetchLocationsSuccess(usersLocations)\n      })\n      // fetch('http://localhost:3001/users')\n      // .then(resp => resp.json())\n      // .then(data => {\n      //   this.props.fetchUsersSuccess(data)\n      // })\n      fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n      .then(resp => resp.json())\n      .then(stations => {\n        let x = stations.data.slice(0,1000)\n        this.props.fetchStatSuccess(stations.data)\n      })\n      fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state')\n      .then(resp => resp.json())\n      .then(cities => {\n        this.props.fetchCitiesSuccess(cities.records)\n      })\n    }\n  }\n\n\n  \n  render(){ \n    return (\n      <div>\n       \n        <ClimateMap stations={this.props.stats} cities={this.props.cities} climateScores={this.state.climateScores}/>\n      </div>)\n  };\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n    locations: state.locations,\n    stats: state.stats,\n    cities: state.cities,\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchLocationsSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess,\n  currentUser\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\n\n"]},"metadata":{},"sourceType":"module"}