{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUsersSuccess } from '../actions/user';\nimport { fetchStatSuccess } from '../actions/stat';\nimport { fetchCitiesSuccess } from '../actions/city';\nimport ClimateMap from './ClimateMap';\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      climateScores: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3001/users').then(resp => resp.json()).then(data => {\n      this.props.fetchUsersSuccess(data);\n    });\n    fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c').then(resp => resp.json()).then(stations => {\n      this.props.fetchStatSuccess(stations.data);\n    });\n    fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state').then(resp => resp.json()).then(cities => {\n      console.log(cities.records);\n      this.props.fetchCitiesSuccess(cities.records);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ClimateMap, {\n      stations: this.props.stats,\n      cities: this.props.cities,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  state.cities.map(cityObj => {\n    fetch(`https://climate-score.p.rapidapi.com/${cityObj.fields.coordinates[0]}/${cityObj.fields.coordinates[1]}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n      }\n    }).then(resp => resp.json()).then(data => {\n      this.setState({\n        climateScores: [...this.state.climateScores, data]\n      });\n      console.log('finished! ');\n    });\n  });\n  return {\n    users: state.users,\n    stats: state.stats,\n    cities: state.cities\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchUsersSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js"],"names":["React","connect","fetchUsersSuccess","fetchStatSuccess","fetchCitiesSuccess","ClimateMap","Dashboard","Component","state","climateScores","componentDidMount","fetch","then","resp","json","data","props","stations","cities","console","log","records","render","stats","mapStateToProps","map","cityObj","fields","coordinates","setState","users","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAGA,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEtCC,KAFsC,GAE9B;AACNC,MAAAA,aAAa,EAAE;AADT,KAF8B;AAAA;;AAMtCC,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,WAAKC,KAAL,CAAWd,iBAAX,CAA6Ba,IAA7B;AACD,KAJD;AAKAJ,IAAAA,KAAK,CAAC,+GAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMK,QAAQ,IAAI;AAChB,WAAKD,KAAL,CAAWb,gBAAX,CAA4Bc,QAAQ,CAACF,IAArC;AACD,KAJD;AAKEJ,IAAAA,KAAK,CAAC,iLAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMM,MAAM,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB;AACA,WAAKL,KAAL,CAAWZ,kBAAX,CAA8Bc,MAAM,CAACG,OAArC;AACD,KALD;AAOD;;AAGDC,EAAAA,MAAM,GAAE;AACN,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWO,KAAjC;AAAwC,MAAA,MAAM,EAAE,KAAKP,KAAL,CAAWE,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADF;AAIH;;AAhCqC;;AAmCxC,MAAMM,eAAe,GAAIhB,KAAD,IAAW;AACjCA,EAAAA,KAAK,CAACU,MAAN,CAAaO,GAAb,CAAkBC,OAAD,IAAa;AAC5Bf,IAAAA,KAAK,CAAE,wCAAuCe,OAAO,CAACC,MAAR,CAAeC,WAAf,CAA2B,CAA3B,CAA8B,IAAGF,OAAO,CAACC,MAAR,CAAeC,WAAf,CAA2B,CAA3B,CAA8B,EAAxG,EAA2G;AAC9G,gBAAU,KADoG;AAE9G,iBAAW;AACT,2BAAmB,8BADV;AAET,0BAAkB;AAFT;AAFmG,KAA3G,CAAL,CAOChB,IAPD,CAOMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAPd,EAQCF,IARD,CAQMG,IAAI,IAAI;AACZ,WAAKc,QAAL,CAAc;AACZpB,QAAAA,aAAa,EAAE,CACb,GAAG,KAAKD,KAAL,CAAWC,aADD,EAEbM,IAFa;AADH,OAAd;AAMAI,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,KAhBD;AAiBD,GAlBD;AAmBA,SAAO;AACLU,IAAAA,KAAK,EAAEtB,KAAK,CAACsB,KADR;AAELP,IAAAA,KAAK,EAAEf,KAAK,CAACe,KAFR;AAGLL,IAAAA,MAAM,EAAEV,KAAK,CAACU;AAHT,GAAP;AAKD,CAzBD;;AA2BA,MAAMa,kBAAkB,GAAG;AACzB7B,EAAAA,iBADyB;AAEzBC,EAAAA,gBAFyB;AAGzBC,EAAAA;AAHyB,CAA3B;AAMA,eAAeH,OAAO,CAACuB,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CzB,SAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { fetchUsersSuccess } from '../actions/user'\nimport { fetchStatSuccess } from '../actions/stat'\nimport { fetchCitiesSuccess } from '../actions/city'\nimport ClimateMap from './ClimateMap'\n\n\nclass Dashboard extends React.Component {\n\n  state = {\n    climateScores: []\n  }\n\n  componentDidMount(){\n    fetch('http://localhost:3001/users')\n    .then(resp => resp.json())\n    .then(data => {\n      this.props.fetchUsersSuccess(data)\n    })\n    fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n    .then(resp => resp.json())\n    .then(stations => {\n      this.props.fetchStatSuccess(stations.data)\n    })\n      fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state')\n      .then(resp => resp.json())\n      .then(cities => {\n        console.log(cities.records)\n        this.props.fetchCitiesSuccess(cities.records)\n      })\n      \n    }\n    \n    \n    render(){ \n      return (\n        <div>\n        <ClimateMap stations={this.props.stats} cities={this.props.cities}/>\n      </div>)\n  };\n}\n\nconst mapStateToProps = (state) => {\n  state.cities.map((cityObj) => {\n    fetch(`https://climate-score.p.rapidapi.com/${cityObj.fields.coordinates[0]}/${cityObj.fields.coordinates[1]}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      })\n    .then(resp => resp.json())\n    .then(data => {\n      this.setState({\n        climateScores: [\n          ...this.state.climateScores,\n          data\n        ]\n      })\n      console.log('finished! ')\n    })\n  })\n  return {\n    users: state.users,\n    stats: state.stats,\n    cities: state.cities\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchUsersSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\n\n"]},"metadata":{},"sourceType":"module"}