{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUsersSuccess } from '../actions/user';\nimport { fetchStatSuccess } from '../actions/stat';\nimport { fetchCitiesSuccess } from '../actions/city';\nimport ClimateMap from './ClimateMap';\nimport cities from './cities.json';\nimport climScores from './climScores.json';\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      climateScores: climScores,\n      stations: {}\n    };\n\n    this.fetchAllStats = () => {\n      console.log(this.state);\n      console.log(this.props);\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3001/users').then(resp => resp.json()).then(data => {\n      this.props.fetchUsersSuccess(data);\n    });\n    fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c').then(resp => resp.json()).then(stations => {\n      // this.setState({\n      //   stations: stations\n      // })\n      this.props.fetchStatSuccess(stations.data);\n    });\n    fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state').then(resp => resp.json()).then(cities => {\n      console.log(cities.records);\n      this.props.fetchCitiesSuccess(cities.records);\n    });\n  }\n\n  render() {\n    this.fetchAllStats();\n    console.log(this.state);\n    console.log(this.props);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ClimateMap, {\n      stations: this.props.stats,\n      cities: this.props.cities,\n      climateScores: this.state.climateScores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    users: state.users,\n    stats: state.stats,\n    cities: state.cities\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchUsersSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js"],"names":["React","connect","fetchUsersSuccess","fetchStatSuccess","fetchCitiesSuccess","ClimateMap","cities","climScores","Dashboard","Component","state","climateScores","stations","fetchAllStats","console","log","props","componentDidMount","fetch","then","resp","json","data","records","render","stats","mapStateToProps","users","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;;AAEA,MAAMC,SAAN,SAAwBR,KAAK,CAACS,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEtCC,KAFsC,GAE9B;AACNC,MAAAA,aAAa,EAAEJ,UADT;AAENK,MAAAA,QAAQ,EAAE;AAFJ,KAF8B;;AAAA,SAkCtCC,aAlCsC,GAkCtB,MAAM;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACD,KArCqC;AAAA;;AAOtCC,EAAAA,iBAAiB,GAAE;AAEfC,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,WAAKN,KAAL,CAAWd,iBAAX,CAA6BoB,IAA7B;AACD,KAJD;AAKAJ,IAAAA,KAAK,CAAC,+GAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMP,QAAQ,IAAI;AAChB;AACA;AACA;AACA,WAAKI,KAAL,CAAWb,gBAAX,CAA4BS,QAAQ,CAACU,IAArC;AACD,KAPD;AAQAJ,IAAAA,KAAK,CAAC,iLAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMb,MAAM,IAAI;AACdQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACiB,OAAnB;AACA,WAAKP,KAAL,CAAWZ,kBAAX,CAA8BE,MAAM,CAACiB,OAArC;AACD,KALD;AAUH;;AAODC,EAAAA,MAAM,GAAE;AACN,SAAKX,aAAL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,KAAKA,KAAL,CAAWS,KAAjC;AAAwC,MAAA,MAAM,EAAE,KAAKT,KAAL,CAAWV,MAA3D;AAAmE,MAAA,aAAa,EAAE,KAAKI,KAAL,CAAWC,aAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAKD;;AAhDqC;;AAmDxC,MAAMe,eAAe,GAAIhB,KAAD,IAAW;AACjCI,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,SAAO;AACLiB,IAAAA,KAAK,EAAEjB,KAAK,CAACiB,KADR;AAELF,IAAAA,KAAK,EAAEf,KAAK,CAACe,KAFR;AAGLnB,IAAAA,MAAM,EAAEI,KAAK,CAACJ;AAHT,GAAP;AAKD,CAPD;;AASA,MAAMsB,kBAAkB,GAAG;AACzB1B,EAAAA,iBADyB;AAEzBC,EAAAA,gBAFyB;AAGzBC,EAAAA;AAHyB,CAA3B;AAMA,eAAeH,OAAO,CAACyB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CpB,SAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { fetchUsersSuccess } from '../actions/user'\nimport { fetchStatSuccess } from '../actions/stat'\nimport { fetchCitiesSuccess } from '../actions/city'\nimport ClimateMap from './ClimateMap'\nimport cities from './cities.json'\nimport climScores from './climScores.json'\n\nclass Dashboard extends React.Component {\n\n  state = {\n    climateScores: climScores,\n    stations: {}\n  }\n  \n  componentDidMount(){\n\n      fetch('http://localhost:3001/users')\n      .then(resp => resp.json())\n      .then(data => {\n        this.props.fetchUsersSuccess(data)\n      })\n      fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n      .then(resp => resp.json())\n      .then(stations => {\n        // this.setState({\n        //   stations: stations\n        // })\n        this.props.fetchStatSuccess(stations.data)\n      })\n      fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state')\n      .then(resp => resp.json())\n      .then(cities => {\n        console.log(cities.records)\n        this.props.fetchCitiesSuccess(cities.records)\n      })\n\n\n\n       \n  }\n\n  fetchAllStats = () => {\n    console.log(this.state)\n    console.log(this.props)\n  }\n\n  render(){ \n    this.fetchAllStats()\n    console.log(this.state)\n    console.log(this.props)\n    return (\n      <div>\n       \n        <ClimateMap stations={this.props.stats} cities={this.props.cities} climateScores={this.state.climateScores}/>\n      </div>)\n  };\n}\n\nconst mapStateToProps = (state) => {\n  console.log(state)\n  return {\n    users: state.users,\n    stats: state.stats,\n    cities: state.cities,\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchUsersSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\n\n"]},"metadata":{},"sourceType":"module"}