{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore';\nexport class ClimateMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      showClimateScore: false,\n      coords: {\n        lat: '40.6499541',\n        lng: '-87.8512693'\n      },\n      address: '',\n      allScores: {\n        ClimateScore: 33,\n        DroughtScore: 67,\n        FireScore: 33,\n        SeaLevelScore: 0,\n        StormScore: 63,\n        TempScore: 1\n      }\n    };\n\n    this.mapCLicked = (mapProps, map, event) => {\n      console.log('I was clicked!');\n      console.log(mapProps);\n      console.log(map);\n      console.log(event);\n    };\n\n    this.onMarkerDragEnd = coord => {\n      const {\n        latLng\n      } = coord;\n      const newLat = latLng.lat();\n      const newLon = latLng.lng();\n      fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      }).then(resp => resp.json()).then(data => {\n        console.log(data);\n        this.setState({\n          allScores: {\n            ClimateScore: data.ClimateScore,\n            DroughtScore: data.DroughtScore,\n            FireScore: data.FireScore,\n            SeaLevelScore: data.SeaLevelScore,\n            StormScore: data.StormScore,\n            TempScore: data.TempScore\n          }\n        });\n      }).catch(err => {\n        this.setState({\n          allScores: false\n        });\n        console.log(err);\n      });\n      this.setState({\n        coords: {\n          lat: newLat,\n          lng: newLon\n        }\n      });\n      Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n      Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(response => {\n        const newAddress = response.results[0].formatted_address;\n        this.setState({\n          address: newAddress\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        searchText: e.target.value\n      });\n    };\n\n    this.handleSubmit = value => {\n      // event.preventDefault()\n      console.log(value);\n      Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n      Geocode.fromAddress(`${value.description}`).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        console.log(lat, lng);\n        fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n          \"method\": \"GET\",\n          \"headers\": {\n            \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n          }\n        }).then(resp => resp.json()).then(data => {\n          console.log(data);\n          this.setState({\n            allScores: {\n              ClimateScore: data.ClimateScore,\n              DroughtScore: data.DroughtScore,\n              FireScore: data.FireScore,\n              SeaLevelScore: data.SeaLevelScore,\n              StormScore: data.StormScore,\n              TempScore: data.TempScore\n            }\n          });\n        }).catch(err => {\n          this.setState({\n            allScores: false\n          });\n          console.log(err);\n        });\n        this.setState({\n          coords: {\n            lat: lat,\n            lng: lng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(position => {\n      let lat = position.coords.latitude;\n      let lng = position.coords.longitude;\n      let currentLocation = {\n        lat: lat,\n        lng: lng\n      };\n      this.setState({\n        coords: currentLocation\n      });\n    });\n    Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(response => {\n      const newAddress = response.results[0].formatted_address;\n      this.setState({\n        address: newAddress\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  render() {\n    console.log(this.state.allScores);\n    console.log(this.state.coords);\n    const style = {\n      width: '90%',\n      height: '90%'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ClimateScore, {\n      coords: this.state.coords,\n      scores: this.state.allScores,\n      address: this.state.address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(GooglePlacesAutocomplete, {\n      onSelect: ({\n        value\n      }) => {\n        this.setState({\n          searchText: value\n        });\n      },\n      onSelect: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      style: style,\n      initialCenter: this.state.coords,\n      center: this.state.coords,\n      onClick: this.mapCLicked,\n      zoom: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Current location',\n      draggable: true,\n      initialCenter: this.state.coords,\n      position: this.state.coords,\n      onDragend: (t, map, coord) => this.onMarkerDragEnd(coord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8'\n})(ClimateMap);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","GooglePlacesAutocomplete","Geocode","ClimateScore","ClimateMap","state","searchText","showClimateScore","coords","lat","lng","address","allScores","DroughtScore","FireScore","SeaLevelScore","StormScore","TempScore","mapCLicked","mapProps","map","event","console","log","onMarkerDragEnd","coord","latLng","newLat","newLon","fetch","then","resp","json","data","setState","catch","err","setApiKey","fromLatLng","response","newAddress","results","formatted_address","error","handleChange","e","target","value","handleSubmit","fromAddress","description","geometry","location","componentDidMount","navigator","geolocation","getCurrentPosition","position","latitude","longitude","currentLocation","render","style","width","height","props","google","onMarkerClick","t","onInfoWindowClose","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore'\n\nexport class ClimateMap extends Component {\n\n  state = {\n    searchText: '',\n    showClimateScore: false,\n    coords: {\n      lat: '40.6499541',\n      lng: '-87.8512693'\n    },\n    address: '',\n    allScores: {\n      ClimateScore: 33,\n      DroughtScore: 67,\n      FireScore: 33,\n      SeaLevelScore: 0,\n      StormScore: 63,\n      TempScore: 1\n    } \n  }\n\n  componentDidMount(){\n    navigator.geolocation.getCurrentPosition((position) => {\n      let lat = position.coords.latitude\n      let lng = position.coords.longitude\n      let currentLocation = {lat: lat,lng: lng}\n      this.setState({\n        coords: currentLocation\n      })\n    })\n    Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(\n      response => {\n        const newAddress = response.results[0].formatted_address;\n        this.setState({\n          address: newAddress\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n\n  mapCLicked = (mapProps, map, event) => {\n    console.log('I was clicked!')\n    console.log(mapProps)\n    console.log(map)\n    console.log(event)\n  }\n\n\n  onMarkerDragEnd = (coord) => {\n    const { latLng } = coord;\n    const newLat = latLng.lat();\n    const newLon = latLng.lng();\n    fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n    \t\"method\": \"GET\",\n    \t\"headers\": {\n\t  \t\"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n\t  \t\"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n      }\n    })\n    .then(resp => resp.json())\n    .then(data => {\n      console.log(data)\n      this.setState({\n        allScores: {\n          ClimateScore: data.ClimateScore,\n          DroughtScore: data.DroughtScore,\n          FireScore: data.FireScore,\n          SeaLevelScore: data.SeaLevelScore,\n          StormScore: data.StormScore,\n          TempScore: data.TempScore,\n        },\n      })\n    })\n    .catch(err => {\n      this.setState({\n        allScores: false,\n      })\n      console.log(err)})\n    this.setState({\n      coords: {\n        lat: newLat,\n        lng: newLon\n      }\n    })\n    Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(\n      response => {\n        const newAddress = response.results[0].formatted_address;\n        this.setState({\n          address: newAddress\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      searchText: e.target.value\n    })\n\n  }\n\n  handleSubmit = (value) => {\n    // event.preventDefault()\n    console.log(value)\n    Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    Geocode.fromAddress(`${value.description}`).then(\n      response => {\n      const { lat, lng } = response.results[0].geometry.location;\n      console.log(lat, lng);\n      fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n        \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data)\n        this.setState({\n          allScores: {\n            ClimateScore: data.ClimateScore,\n            DroughtScore: data.DroughtScore,\n            FireScore: data.FireScore,\n            SeaLevelScore: data.SeaLevelScore,\n            StormScore: data.StormScore,\n            TempScore: data.TempScore,\n          },\n        })\n      })\n      .catch(err => {\n        this.setState({\n          allScores: false,\n        })\n        console.log(err)})\n      this.setState({\n        coords: {\n          lat: lat,\n          lng: lng\n        }\n      })\n      },\n      error => {\n      console.error(error);\n    })\n  }\n\n  render() {\n    console.log(this.state.allScores)\n    console.log(this.state.coords)\n    const style = {\n      width: '90%',\n      height: '90%'\n    }\n    return (\n      <div>\n      <ClimateScore coords={this.state.coords} scores={this.state.allScores} address={this.state.address} />\n        <GooglePlacesAutocomplete onSelect={({ value }) => {(this.setState({ searchText: value }))}}\n                                  onSelect={this.handleSubmit}\n        />\n      <Map  google={this.props.google}\n            style={style} \n            initialCenter={this.state.coords}\n            center={this.state.coords}\n            onClick={this.mapCLicked} \n            zoom={14}\n            >\n \n        <Marker onClick={this.onMarkerClick}\n                name={'Current location'} \n                draggable={true}\n                initialCenter={this.state.coords}\n                position={this.state.coords}\n                onDragend={(t, map, coord) => this.onMarkerDragEnd(coord)}/>\n \n        <InfoWindow onClose={this.onInfoWindowClose}>\n        </InfoWindow>\n      </Map>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8')\n})(ClimateMap)"]},"metadata":{},"sourceType":"module"}