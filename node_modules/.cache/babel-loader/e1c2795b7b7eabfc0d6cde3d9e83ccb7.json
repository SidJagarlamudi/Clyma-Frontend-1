{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/MyClimateFrontend/src/components/Dashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchLocationsSuccess } from '../actions/location';\nimport { fetchStatSuccess } from '../actions/stat';\nimport { fetchCitiesSuccess } from '../actions/city';\nimport { currentUser } from '../actions/auth';\nimport ClimateMap from './ClimateMap';\nimport climScores from './climScores.json';\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      climateScores: climScores\n    };\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      this.props.history.push('/login');\n    } else {\n      const reqObj = {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      };\n      fetch('http://localhost:3001/current_user', reqObj).then(resp => resp.json()).then(data => {\n        this.props.currentUser(data);\n      });\n      fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c').then(resp => resp.json()).then(stations => {\n        let y = stations.data;\n        let x = stations.data.slice(0, 4500);\n        this.props.fetchStatSuccess(x);\n      });\n    }\n  }\n\n  render() {\n    if (this.props.stats.length !== 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ClimateMap, {\n        cities: this.props.cities,\n        climateScores: this.state.climateScores,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }));\n    } else {\n      return null;\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    current_user: state.currentUser,\n    locations: state.locations,\n    stats: state.stats,\n    cities: state.cities\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchLocationsSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess,\n  currentUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/MyClimateFrontend/src/components/Dashboard.js"],"names":["React","connect","fetchLocationsSuccess","fetchStatSuccess","fetchCitiesSuccess","currentUser","ClimateMap","climScores","Dashboard","Component","state","climateScores","componentDidMount","token","localStorage","getItem","props","history","push","reqObj","method","headers","fetch","then","resp","json","data","stations","y","x","slice","render","stats","length","cities","mapStateToProps","auth","current_user","locations","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;;AAEA,MAAMC,SAAN,SAAwBR,KAAK,CAACS,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEtCC,KAFsC,GAE9B;AACNC,MAAAA,aAAa,EAAEJ;AADT,KAF8B;AAAA;;AAMtCK,EAAAA,iBAAiB,GAAE;AACjB,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAI,CAACF,KAAL,EAAY;AACV,WAAKG,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACD,KAFD,MAEO;AACL,YAAMC,MAAM,GAAG;AACbC,QAAAA,MAAM,EAAE,KADK;AAEbC,QAAAA,OAAO,EAAE;AACP,2BAAkB,UAASR,KAAM;AAD1B;AAFI,OAAf;AAMAS,MAAAA,KAAK,CAAC,oCAAD,EAAuCH,MAAvC,CAAL,CACCI,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMG,IAAI,IAAI;AACZ,aAAKV,KAAL,CAAWX,WAAX,CAAuBqB,IAAvB;AACD,OAJD;AAKAJ,MAAAA,KAAK,CAAC,+GAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADd,EAECF,IAFD,CAEMI,QAAQ,IAAI;AAChB,YAAIC,CAAC,GAAGD,QAAQ,CAACD,IAAjB;AACA,YAAIG,CAAC,GAAGF,QAAQ,CAACD,IAAT,CAAcI,KAAd,CAAoB,CAApB,EAAsB,IAAtB,CAAR;AACA,aAAKd,KAAL,CAAWb,gBAAX,CAA4B0B,CAA5B;AACD,OAND;AAOD;AACF;;AAEDE,EAAAA,MAAM,GAAE;AACN,QAAI,KAAKf,KAAL,CAAWgB,KAAX,CAAiBC,MAAjB,KAA4B,CAAhC,EAAkC;AAClC,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,UAAD;AAAY,QAAA,MAAM,EAAE,KAAKjB,KAAL,CAAWkB,MAA/B;AAAuC,QAAA,aAAa,EAAE,KAAKxB,KAAL,CAAWC,aAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAIC,KALD,MAKO;AACL,aAAO,IAAP;AACD;AACF;;AAzCqC;;AA6CxC,MAAMwB,eAAe,GAAIzB,KAAD,IAAW;AACjC,SAAO;AACL0B,IAAAA,IAAI,EAAE1B,KAAK,CAAC0B,IADP;AAELC,IAAAA,YAAY,EAAE3B,KAAK,CAACL,WAFf;AAGLiC,IAAAA,SAAS,EAAE5B,KAAK,CAAC4B,SAHZ;AAILN,IAAAA,KAAK,EAAEtB,KAAK,CAACsB,KAJR;AAKLE,IAAAA,MAAM,EAAExB,KAAK,CAACwB;AALT,GAAP;AAOD,CARD;;AAUA,MAAMK,kBAAkB,GAAG;AACzBrC,EAAAA,qBADyB;AAEzBC,EAAAA,gBAFyB;AAGzBC,EAAAA,kBAHyB;AAIzBC,EAAAA;AAJyB,CAA3B;AAOA,eAAeJ,OAAO,CAACkC,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C/B,SAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { fetchLocationsSuccess } from '../actions/location'\nimport { fetchStatSuccess } from '../actions/stat'\nimport { fetchCitiesSuccess } from '../actions/city'\nimport { currentUser } from '../actions/auth'\nimport ClimateMap from './ClimateMap'\nimport climScores from './climScores.json'\n\nclass Dashboard extends React.Component {\n\n  state = {\n    climateScores: climScores,\n  }\n  \n  componentDidMount(){\n    const token = localStorage.getItem('token')\n    if (!token) {\n      this.props.history.push('/login')\n    } else {\n      const reqObj = {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n      fetch('http://localhost:3001/current_user', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        this.props.currentUser(data)\n      })\n      fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n      .then(resp => resp.json())\n      .then(stations => {\n        let y = stations.data\n        let x = stations.data.slice(0,4500)\n        this.props.fetchStatSuccess(x)\n      })\n    }\n  }\n\n  render(){ \n    if (this.props.stats.length !== 0){\n    return (\n      <div>\n        <ClimateMap cities={this.props.cities} climateScores={this.state.climateScores}/>\n      </div>)\n    } else {\n      return null\n    }\n  };\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n    current_user: state.currentUser,\n    locations: state.locations,\n    stats: state.stats,\n    cities: state.cities,\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchLocationsSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess,\n  currentUser\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\n\n"]},"metadata":{},"sourceType":"module"}