{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUsersSuccess } from '../actions/user';\nimport { fetchStatSuccess } from '../actions/stat';\nimport { fetchCitiesSuccess } from '../actions/city';\nimport ClimateMap from './ClimateMap';\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      climateScores: []\n    };\n  }\n\n  componentDidMount() {\n    this.state.cities.map(cityObj => {\n      fetch(`https://climate-score.p.rapidapi.com/${cityObj.fields.coordinates[0]}/${cityObj.fields.coordinates[1]}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      }).then(resp => resp.json()).then(data => {\n        this.setState({\n          climateScores: [...this.state.climateScores, data]\n        });\n        console.log('finished! ');\n      });\n      console.log(this.state.climateScores);\n    }); //   \"method\": \"GET\",\n    //   \"headers\": {\n    //   \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n    //   \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n    //   }\n    // })\n    // .then(resp => resp.json())\n    // .then(data => {\n    //   console.log(data)\n    //   this.setState({\n    //     allScores: {\n    //       ClimateScore: data.ClimateScore,\n    //       DroughtScore: data.DroughtScore,\n    //       FireScore: data.FireScore,\n    //       SeaLevelScore: data.SeaLevelScore,\n    //       StormScore: data.StormScore,\n    //       TempScore: data.TempScore,\n    //     },\n    //   })\n    // })\n\n    fetch('http://localhost:3001/users').then(resp => resp.json()).then(data => {\n      this.props.fetchUsersSuccess(data);\n    });\n    fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c').then(resp => resp.json()).then(stations => {\n      this.props.fetchStatSuccess(stations.data);\n    });\n    fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state').then(resp => resp.json()).then(cities => {\n      console.log(cities.records);\n      this.props.fetchCitiesSuccess(cities.records);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ClimateMap, {\n      stations: this.props.stats,\n      cities: this.props.cities,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    stats: state.stats,\n    cities: state.cities\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchUsersSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Dashboard.js"],"names":["React","connect","fetchUsersSuccess","fetchStatSuccess","fetchCitiesSuccess","ClimateMap","Dashboard","Component","state","climateScores","componentDidMount","cities","map","cityObj","fetch","fields","coordinates","then","resp","json","data","setState","console","log","props","stations","records","render","stats","mapStateToProps","users","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { fetchUsersSuccess } from '../actions/user'\nimport { fetchStatSuccess } from '../actions/stat'\nimport { fetchCitiesSuccess } from '../actions/city'\nimport ClimateMap from './ClimateMap'\n\n\nclass Dashboard extends React.Component {\n\n  state = {\n    climateScores: []\n  }\n\n  componentDidMount(){\n    this.state.cities.map((cityObj) => {\n      fetch(`https://climate-score.p.rapidapi.com/${cityObj.fields.coordinates[0]}/${cityObj.fields.coordinates[1]}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n          }\n        })\n      .then(resp => resp.json())\n      .then(data => {\n        this.setState({\n          climateScores: [\n            ...this.state.climateScores,\n            data\n          ]\n        })\n        console.log('finished! ')\n      })\n      console.log(this.state.climateScores)\n    })\n      //   \"method\": \"GET\",\n      //   \"headers\": {\n      //   \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n      //   \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n      //   }\n      // })\n      // .then(resp => resp.json())\n      // .then(data => {\n      //   console.log(data)\n      //   this.setState({\n      //     allScores: {\n      //       ClimateScore: data.ClimateScore,\n      //       DroughtScore: data.DroughtScore,\n      //       FireScore: data.FireScore,\n      //       SeaLevelScore: data.SeaLevelScore,\n      //       StormScore: data.StormScore,\n      //       TempScore: data.TempScore,\n      //     },\n      //   })\n      // })\n      fetch('http://localhost:3001/users')\n      .then(resp => resp.json())\n      .then(data => {\n        this.props.fetchUsersSuccess(data)\n      })\n      fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n      .then(resp => resp.json())\n      .then(stations => {\n        this.props.fetchStatSuccess(stations.data)\n      })\n      fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state')\n      .then(resp => resp.json())\n      .then(cities => {\n        console.log(cities.records)\n        this.props.fetchCitiesSuccess(cities.records)\n      })\n    }\n    \n\n  render(){ \n    return (\n      <div>\n        <ClimateMap stations={this.props.stats} cities={this.props.cities}/>\n      </div>)\n  };\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.users,\n    stats: state.stats,\n    cities: state.cities\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchUsersSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\n\n"]},"metadata":{},"sourceType":"module"}