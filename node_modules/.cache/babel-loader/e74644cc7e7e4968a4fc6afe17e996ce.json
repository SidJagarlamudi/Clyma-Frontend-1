{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore';\nexport class ClimateMap extends Component {\n  constructor() {\n    super();\n\n    this.mapCLicked = (mapProps, map, event) => {\n      console.log('I was clicked!');\n      console.log(mapProps);\n      console.log(map);\n      console.log(event);\n    };\n\n    this.onMarkerDragEnd = coord => {\n      const {\n        latLng\n      } = coord;\n      const newLat = latLng.lat();\n      const newLon = latLng.lng();\n      fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      }).then(resp => resp.json()).then(data => {\n        console.log(data);\n        this.setState({\n          allScores: {\n            ClimateScore: data.ClimateScore,\n            DroughtScore: data.DroughtScore,\n            FireScore: data.FireScore,\n            SeaLevelScore: data.SeaLevelScore,\n            StormScore: data.StormScore,\n            TempScore: data.TempScore\n          }\n        });\n      }).catch(err => {\n        this.setState({\n          allScores: false\n        });\n        console.log(err);\n      });\n      this.setState({\n        coords: {\n          lat: newLat,\n          lng: newLon\n        }\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        searchText: e.target.value\n      });\n    };\n\n    this.handleSubmit = value => {\n      // event.preventDefault()\n      console.log(value);\n      Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n      Geocode.fromAddress(`${value.description}`).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        console.log(lat, lng);\n        fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n          \"method\": \"GET\",\n          \"headers\": {\n            \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n          }\n        }).then(resp => resp.json()).then(data => {\n          console.log(data);\n          this.setState({\n            allScores: {\n              ClimateScore: data.ClimateScore,\n              DroughtScore: data.DroughtScore,\n              FireScore: data.FireScore,\n              SeaLevelScore: data.SeaLevelScore,\n              StormScore: data.StormScore,\n              TempScore: data.TempScore\n            }\n          });\n        }).catch(err => {\n          this.setState({\n            allScores: false\n          });\n          console.log(err);\n        });\n        this.setState({\n          coords: {\n            lat: lat,\n            lng: lng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      searchText: '',\n      showClimateScore: false,\n      coords: {\n        lat: '40.6499541',\n        lng: '-87.8512693'\n      },\n      address: getAddress,\n      allScores: {\n        ClimateScore: 33,\n        DroughtScore: 67,\n        FireScore: 33,\n        SeaLevelScore: 0,\n        StormScore: 63,\n        TempScore: 1\n      }\n    };\n    console.log(this.state);\n    const getAddress = Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(response => {\n      const address = response.results[0].formatted_address;\n      console.log(address);\n    }, error => {\n      console.error(error);\n    });\n    console.log(getAddress);\n  }\n\n  render() {\n    console.log(this.state.allScores);\n    console.log(this.state.coords);\n    const style = {\n      width: '90%',\n      height: '90%'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ClimateScore, {\n      coords: this.state.coords,\n      scores: this.state.allScores,\n      address: this.state.address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(GooglePlacesAutocomplete, {\n      onSelect: ({\n        value\n      }) => {\n        this.setState({\n          searchText: value\n        });\n      },\n      onSelect: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      style: style,\n      initialCenter: this.state.coords,\n      center: this.state.coords,\n      onClick: this.mapCLicked,\n      zoom: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Current location',\n      draggable: true,\n      position: this.state.coords,\n      onDragend: (t, map, coord) => this.onMarkerDragEnd(coord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8'\n})(ClimateMap);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","GooglePlacesAutocomplete","Geocode","ClimateScore","ClimateMap","constructor","mapCLicked","mapProps","map","event","console","log","onMarkerDragEnd","coord","latLng","newLat","lat","newLon","lng","fetch","then","resp","json","data","setState","allScores","DroughtScore","FireScore","SeaLevelScore","StormScore","TempScore","catch","err","coords","handleChange","e","searchText","target","value","handleSubmit","setApiKey","fromAddress","description","response","results","geometry","location","error","state","showClimateScore","address","getAddress","fromLatLng","formatted_address","render","style","width","height","props","google","onMarkerClick","t","onInfoWindowClose","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore'\n\nexport class ClimateMap extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      searchText: '',\n      showClimateScore: false,\n      coords: {\n        lat: '40.6499541',\n        lng: '-87.8512693'\n      },\n      address: getAddress,\n      allScores: {\n        ClimateScore: 33,\n        DroughtScore: 67,\n        FireScore: 33,\n        SeaLevelScore: 0,\n        StormScore: 63,\n        TempScore: 1\n      } \n    }\n    console.log(this.state)\n    const getAddress = Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(\n      response => {\n        const address = response.results[0].formatted_address;\n        console.log(address);\n      },\n      error => {\n        console.error(error);\n      }\n    );\n    console.log(getAddress)\n  }\n  \n  \n\n  mapCLicked = (mapProps, map, event) => {\n    console.log('I was clicked!')\n    console.log(mapProps)\n    console.log(map)\n    console.log(event)\n  }\n\n\n  onMarkerDragEnd = (coord) => {\n    const { latLng } = coord;\n    const newLat = latLng.lat();\n    const newLon = latLng.lng();\n    fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n    \t\"method\": \"GET\",\n    \t\"headers\": {\n\t  \t\"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n\t  \t\"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n      }\n    })\n    .then(resp => resp.json())\n    .then(data => {\n      console.log(data)\n      this.setState({\n        allScores: {\n          ClimateScore: data.ClimateScore,\n          DroughtScore: data.DroughtScore,\n          FireScore: data.FireScore,\n          SeaLevelScore: data.SeaLevelScore,\n          StormScore: data.StormScore,\n          TempScore: data.TempScore,\n        },\n      })\n    })\n    .catch(err => {\n      this.setState({\n        allScores: false,\n      })\n      console.log(err)})\n    this.setState({\n      coords: {\n        lat: newLat,\n        lng: newLon\n      }\n    })\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      searchText: e.target.value\n    })\n\n  }\n\n  handleSubmit = (value) => {\n    // event.preventDefault()\n    console.log(value)\n    Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    Geocode.fromAddress(`${value.description}`).then(\n      response => {\n      const { lat, lng } = response.results[0].geometry.location;\n      console.log(lat, lng);\n      fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n        \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data)\n        this.setState({\n          allScores: {\n            ClimateScore: data.ClimateScore,\n            DroughtScore: data.DroughtScore,\n            FireScore: data.FireScore,\n            SeaLevelScore: data.SeaLevelScore,\n            StormScore: data.StormScore,\n            TempScore: data.TempScore,\n          },\n        })\n      })\n      .catch(err => {\n        this.setState({\n          allScores: false,\n        })\n        console.log(err)})\n      this.setState({\n        coords: {\n          lat: lat,\n          lng: lng\n        }\n      })\n      },\n      error => {\n      console.error(error);\n    })\n  }\n\n  render() {\n    console.log(this.state.allScores)\n    console.log(this.state.coords)\n    const style = {\n      width: '90%',\n      height: '90%'\n    }\n    return (\n      <div>\n      <ClimateScore coords={this.state.coords} scores={this.state.allScores} address={this.state.address} />\n        <GooglePlacesAutocomplete onSelect={({ value }) => {(this.setState({ searchText: value }))}}\n                                  onSelect={this.handleSubmit}\n        />\n      <Map  google={this.props.google}\n            style={style} \n            initialCenter={this.state.coords}\n            center={this.state.coords}\n            onClick={this.mapCLicked} \n            zoom={14}\n            >\n \n        <Marker onClick={this.onMarkerClick}\n                name={'Current location'} \n                draggable={true}\n                position={this.state.coords}\n                onDragend={(t, map, coord) => this.onMarkerDragEnd(coord)}/>\n \n        <InfoWindow onClose={this.onInfoWindowClose}>\n        </InfoWindow>\n      </Map>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8')\n})(ClimateMap)"]},"metadata":{},"sourceType":"module"}