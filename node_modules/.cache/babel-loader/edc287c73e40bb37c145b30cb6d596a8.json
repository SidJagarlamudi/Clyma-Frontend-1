{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Rankings.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchLocationsSuccess } from '../actions/location';\nimport { fetchStatSuccess } from '../actions/stat';\nimport { fetchCitiesSuccess } from '../actions/city';\nimport { currentUser } from '../actions/auth';\nimport ClimateMap from './ClimateMap';\nimport Geocode from \"react-geocode\";\nimport climScores from './climScores.json';\n\nclass Rankings extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      climateScores: climScores\n    };\n\n    this.gatherCountries = () => {\n      this.props.stats.map(stat => {\n        Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n        Geocode.fromLatLng(45, 45).then(response => {\n          // const newAddress = response.results[0].types.country;\n          console.log(response.results[4].formatted_address); // this._score.state.address = newAddress\n        }, error => {\n          console.error(error);\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem('token');\n    console.log(token);\n\n    if (!token) {\n      this.props.history.push('/login');\n    } else {\n      const reqObj = {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      };\n      fetch('http://localhost:3001/current_user', reqObj).then(resp => resp.json()).then(data => {\n        console.log(data);\n        this.props.currentUser(data);\n      });\n\n      if (this.props.auth !== null) {\n        fetch('http://localhost:3001/locations').then(resp => resp.json()).then(locations => {\n          console.log(this.props);\n          console.log(this.state);\n          const usersLocations = locations.filter(loc => loc.user_id === this.props.auth.id);\n          this.props.fetchLocationsSuccess(usersLocations);\n        });\n      } // fetch('http://localhost:3001/users')\n      // .then(resp => resp.json())\n      // .then(data => {\n      //   this.props.fetchUsersSuccess(data)\n      // })\n\n\n      fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c').then(resp => resp.json()).then(stations => {\n        let y = stations.data;\n        let x = stations.data.slice(0, 1000);\n        console.log(y);\n        this.props.fetchStatSuccess(x);\n      });\n      fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state').then(resp => resp.json()).then(cities => {\n        this.props.fetchCitiesSuccess(cities.records);\n      });\n    }\n  }\n\n  render() {\n    console.log(this.props.stats);\n    this.gatherCountries(); // if (this.props.stats.length !== 0){\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 8\n      }\n    }, \"Rankings\")); // } else {\n    //   return null\n    // }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth,\n    current_user: state.currentUser,\n    locations: state.locations,\n    stats: state.stats,\n    cities: state.cities\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchLocationsSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess,\n  currentUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Rankings);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/Rankings.js"],"names":["React","connect","fetchLocationsSuccess","fetchStatSuccess","fetchCitiesSuccess","currentUser","ClimateMap","Geocode","climScores","Rankings","Component","state","climateScores","gatherCountries","props","stats","map","stat","setApiKey","fromLatLng","then","response","console","log","results","formatted_address","error","componentDidMount","token","localStorage","getItem","history","push","reqObj","method","headers","fetch","resp","json","data","auth","locations","usersLocations","filter","loc","user_id","id","stations","y","x","slice","cities","records","render","mapStateToProps","current_user","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { fetchLocationsSuccess } from '../actions/location'\nimport { fetchStatSuccess } from '../actions/stat'\nimport { fetchCitiesSuccess } from '../actions/city'\nimport { currentUser } from '../actions/auth'\nimport ClimateMap from './ClimateMap'\nimport Geocode from \"react-geocode\";\nimport climScores from './climScores.json'\n\nclass Rankings extends React.Component {\n\n  state = {\n    climateScores: climScores,\n  }\n  \n  componentDidMount(){\n    const token = localStorage.getItem('token')\n    console.log(token)\n    if (!token) {\n      this.props.history.push('/login')\n    } else {\n      const reqObj = {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }\n      fetch('http://localhost:3001/current_user', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data)\n        this.props.currentUser(data)\n      })\n      if (this.props.auth !== null){\n\n        fetch('http://localhost:3001/locations')\n        .then(resp => resp.json())\n        .then(locations => {\n          console.log(this.props)\n          console.log(this.state)\n          const usersLocations = locations.filter(loc => loc.user_id === this.props.auth.id)\n          this.props.fetchLocationsSuccess(usersLocations)\n        })\n      }\n      // fetch('http://localhost:3001/users')\n      // .then(resp => resp.json())\n      // .then(data => {\n      //   this.props.fetchUsersSuccess(data)\n      // })\n      fetch('https://api.waqi.info/map/bounds/?latlng=85,-180,-85.05115,180&token=87b2bba6a5b2e26c577ffc48e297eaed82a8408c')\n      .then(resp => resp.json())\n      .then(stations => {\n        let y = stations.data\n        let x = stations.data.slice(0,1000)\n        console.log(y)\n        this.props.fetchStatSuccess(x)\n      })\n      fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=1000-largest-us-cities-by-population-with-geographic-coordinates&q=&rows=1000&sort=-rank&facet=city&facet=state')\n      .then(resp => resp.json())\n      .then(cities => {\n        this.props.fetchCitiesSuccess(cities.records)\n      })\n    }\n  }\n\n  gatherCountries = () => {\n    this.props.stats.map((stat) => {\n      Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n      Geocode.fromLatLng(45, 45).then(\n        response => {\n          // const newAddress = response.results[0].types.country;\n          console.log(response.results[4].formatted_address)\n          // this._score.state.address = newAddress\n        },\n        error => {\n          console.error(error);\n        }\n      );\n    })\n  }\n\n  render(){ \n    console.log(this.props.stats)\n    this.gatherCountries()\n    // if (this.props.stats.length !== 0){\n    return (\n      <div>\n       \n       <h1>Rankings</h1>\n      </div>)\n    // } else {\n    //   return null\n    // }\n  };\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth,\n    current_user: state.currentUser,\n    locations: state.locations,\n    stats: state.stats,\n    cities: state.cities,\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchLocationsSuccess,\n  fetchStatSuccess,\n  fetchCitiesSuccess,\n  currentUser\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Rankings);\n\n\n"]},"metadata":{},"sourceType":"module"}