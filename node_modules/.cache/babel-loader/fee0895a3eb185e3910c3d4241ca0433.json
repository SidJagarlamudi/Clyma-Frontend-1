{"ast":null,"code":"var _jsxFileName = \"/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore';\nexport class ClimateMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchText: '',\n      showClimateScore: false,\n      coords: {\n        lat: '40.6499541',\n        lng: '-87.8512693'\n      },\n      address: Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(response => {\n        const address = response.results[0].formatted_address;\n        console.log(address);\n      }, error => {\n        console.error(error);\n      }),\n      allScores: {\n        ClimateScore: 33,\n        DroughtScore: 67,\n        FireScore: 33,\n        SeaLevelScore: 0,\n        StormScore: 63,\n        TempScore: 1\n      }\n    };\n\n    this.mapCLicked = (mapProps, map, event) => {\n      console.log('I was clicked!');\n      console.log(mapProps);\n      console.log(map);\n      console.log(event);\n    };\n\n    this.onMarkerDragEnd = coord => {\n      const {\n        latLng\n      } = coord;\n      const newLat = latLng.lat();\n      const newLon = latLng.lng();\n      fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      }).then(resp => resp.json()).then(data => {\n        console.log(data);\n        this.setState({\n          allScores: {\n            ClimateScore: data.ClimateScore,\n            DroughtScore: data.DroughtScore,\n            FireScore: data.FireScore,\n            SeaLevelScore: data.SeaLevelScore,\n            StormScore: data.StormScore,\n            TempScore: data.TempScore\n          }\n        });\n      }).catch(err => {\n        this.setState({\n          allScores: false\n        });\n        console.log(err);\n      });\n      this.setState({\n        coords: {\n          lat: newLat,\n          lng: newLon\n        }\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        searchText: e.target.value\n      });\n    };\n\n    this.handleSubmit = value => {\n      // event.preventDefault()\n      console.log(value);\n      Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n      Geocode.fromAddress(`${value.description}`).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        console.log(lat, lng);\n        fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n          \"method\": \"GET\",\n          \"headers\": {\n            \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n          }\n        }).then(resp => resp.json()).then(data => {\n          console.log(data);\n          this.setState({\n            allScores: {\n              ClimateScore: data.ClimateScore,\n              DroughtScore: data.DroughtScore,\n              FireScore: data.FireScore,\n              SeaLevelScore: data.SeaLevelScore,\n              StormScore: data.StormScore,\n              TempScore: data.TempScore\n            }\n          });\n        }).catch(err => {\n          this.setState({\n            allScores: false\n          });\n          console.log(err);\n        });\n        this.setState({\n          coords: {\n            lat: lat,\n            lng: lng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n  }\n\n  render() {\n    console.log(this.state.allScores);\n    console.log(this.state.coords);\n    const style = {\n      width: '90%',\n      height: '90%'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ClimateScore, {\n      coords: this.state.coords,\n      scores: this.state.allScores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(GooglePlacesAutocomplete, {\n      onSelect: ({\n        value\n      }) => {\n        this.setState({\n          searchText: value\n        });\n      },\n      onSelect: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      style: style,\n      initialCenter: this.state.coords,\n      center: this.state.coords,\n      onClick: this.mapCLicked,\n      zoom: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Current location',\n      draggable: true,\n      position: this.state.coords,\n      onDragend: (t, map, coord) => this.onMarkerDragEnd(coord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8'\n})(ClimateMap);","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/frontend/src/components/ClimateMap.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","GooglePlacesAutocomplete","Geocode","ClimateScore","ClimateMap","state","searchText","showClimateScore","coords","lat","lng","address","fromLatLng","then","response","results","formatted_address","console","log","error","allScores","DroughtScore","FireScore","SeaLevelScore","StormScore","TempScore","mapCLicked","mapProps","map","event","onMarkerDragEnd","coord","latLng","newLat","newLon","fetch","resp","json","data","setState","catch","err","handleChange","e","target","value","handleSubmit","setApiKey","fromAddress","description","geometry","location","render","style","width","height","props","google","onMarkerClick","t","onInfoWindowClose","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'react-google-places-autocomplete/dist/index.min.css';\nimport Geocode from \"react-geocode\";\nimport ClimateScore from './ClimateScore'\n\nexport class ClimateMap extends Component {\n  \n  state = {\n    searchText: '',\n    showClimateScore: false,\n    coords: {\n      lat: '40.6499541',\n      lng: '-87.8512693'\n    },\n    address: Geocode.fromLatLng(this.state.coords.lat, this.state.coords.lng).then(\n      response => {\n        const address = response.results[0].formatted_address;\n        console.log(address);\n      },\n      error => {\n        console.error(error);\n      }\n    ),\n    allScores: {\n      ClimateScore: 33,\n      DroughtScore: 67,\n      FireScore: 33,\n      SeaLevelScore: 0,\n      StormScore: 63,\n      TempScore: 1\n    } \n  }\n\n  mapCLicked = (mapProps, map, event) => {\n    console.log('I was clicked!')\n    console.log(mapProps)\n    console.log(map)\n    console.log(event)\n  }\n\n\n  onMarkerDragEnd = (coord) => {\n    const { latLng } = coord;\n    const newLat = latLng.lat();\n    const newLon = latLng.lng();\n    fetch(`https://climate-score.p.rapidapi.com/${newLat}/${newLon}`, {\n    \t\"method\": \"GET\",\n    \t\"headers\": {\n\t  \t\"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n\t  \t\"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n      }\n    })\n    .then(resp => resp.json())\n    .then(data => {\n      console.log(data)\n      this.setState({\n        allScores: {\n          ClimateScore: data.ClimateScore,\n          DroughtScore: data.DroughtScore,\n          FireScore: data.FireScore,\n          SeaLevelScore: data.SeaLevelScore,\n          StormScore: data.StormScore,\n          TempScore: data.TempScore,\n        },\n      })\n    })\n    .catch(err => {\n      this.setState({\n        allScores: false,\n      })\n      console.log(err)})\n    this.setState({\n      coords: {\n        lat: newLat,\n        lng: newLon\n      }\n    })\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      searchText: e.target.value\n    })\n\n  }\n\n  handleSubmit = (value) => {\n    // event.preventDefault()\n    console.log(value)\n    Geocode.setApiKey(\"AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8\");\n    Geocode.fromAddress(`${value.description}`).then(\n      response => {\n      const { lat, lng } = response.results[0].geometry.location;\n      console.log(lat, lng);\n      fetch(`https://climate-score.p.rapidapi.com/${lat}/${lng}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n        \"x-rapidapi-host\": \"climate-score.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"c5855f8358mshe884588b34ae70ep1a1627jsn5e1e97c23a80\"\n        }\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data)\n        this.setState({\n          allScores: {\n            ClimateScore: data.ClimateScore,\n            DroughtScore: data.DroughtScore,\n            FireScore: data.FireScore,\n            SeaLevelScore: data.SeaLevelScore,\n            StormScore: data.StormScore,\n            TempScore: data.TempScore,\n          },\n        })\n      })\n      .catch(err => {\n        this.setState({\n          allScores: false,\n        })\n        console.log(err)})\n      this.setState({\n        coords: {\n          lat: lat,\n          lng: lng\n        }\n      })\n      },\n      error => {\n      console.error(error);\n    })\n  }\n\n  render() {\n    console.log(this.state.allScores)\n    console.log(this.state.coords)\n    const style = {\n      width: '90%',\n      height: '90%'\n    }\n    return (\n      <div>\n      <ClimateScore coords={this.state.coords} scores={this.state.allScores} />\n        {/* <form onSubmit={this.handleSubmit}>\n            <input type='text' value={this.state.text} onChange={this.handleChange} />\n            <input type='submit' value='Search!'/>\n        </form> */}\n        <GooglePlacesAutocomplete onSelect={({ value }) => {(this.setState({ searchText: value }))}}\n                                  onSelect={this.handleSubmit}\n        />\n      <Map  google={this.props.google}\n            style={style} \n            initialCenter={this.state.coords}\n            center={this.state.coords}\n            onClick={this.mapCLicked} \n            zoom={14}\n            >\n \n        <Marker onClick={this.onMarkerClick}\n                name={'Current location'} \n                draggable={true}\n                position={this.state.coords}\n                onDragend={(t, map, coord) => this.onMarkerDragEnd(coord)}/>\n \n        <InfoWindow onClose={this.onInfoWindowClose}>\n        </InfoWindow>\n      </Map>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyDmc1KD6Xr80d3hduc4Q2MObw1uotQuY-8')\n})(ClimateMap)"]},"metadata":{},"sourceType":"module"}